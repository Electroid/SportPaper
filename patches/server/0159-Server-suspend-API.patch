From de9427b8d8b1a7203c09399ddbf6aafb443752bd Mon Sep 17 00:00:00 2001
From: cswhite2000 <18whitechristop@gmail.com>
Date: Mon, 27 Aug 2018 23:39:11 -0700
Subject: [PATCH] Server suspend API


diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 8e1444ea..5123daa4 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -295,6 +295,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                     thread1.setName("Server Watchdog");
                     thread1.setDaemon(true);
                     thread1.start();
+                    watchdogThread = thread1; // SportBukkit
                 }
 
                 return true;
@@ -387,6 +388,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
     public void issueCommand(String s, ICommandListener icommandlistener) {
         this.l.add(new ServerCommand(s, icommandlistener));
+        interrupt(); // SportBukkit
     }
 
     // SportBukkit start
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index 5bfad62e..d2b51eed 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -290,7 +290,7 @@ public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBo
                             }
                             // CraftBukkit end
                             LoginListener.c.info("UUID of player " + LoginListener.this.i.getName() + " is " + LoginListener.this.i.getId());
-                            //server.setSuspended(false);
+                            server.setSuspended(false);
                             LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
         }
     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 333873a9..c4c0c632 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.net.Proxy;
 import java.security.KeyPair;
 import java.text.SimpleDateFormat;
+import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -32,8 +33,11 @@ import java.util.Queue;
 import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.Callable;
+import java.util.concurrent.ConcurrentLinkedDeque;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
+import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
@@ -41,14 +45,18 @@ import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
 import java.io.IOException;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import jline.console.ConsoleReader;
 import joptsimple.OptionSet;
 
 import org.bukkit.craftbukkit.Main;
 import co.aikar.timings.SpigotTimings; // Spigot
+import org.bukkit.event.EventCallback;
+import org.bukkit.event.server.ServerSuspendEvent;
 import org.github.paperspigot.PaperSpigotConfig;
 import org.github.paperspigot.utils.CachedSizeConcurrentLinkedQueue;
+import org.spigotmc.WatchdogThread;
 // CraftBukkit end
 
 public abstract class MinecraftServer implements Runnable, ICommandListener, IAsyncTaskHandler, IMojangStatistics {
@@ -103,9 +111,11 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     private long X = 0L;
     private final GameProfileRepository Y;
     private final UserCache Z;
-    protected final Queue<FutureTask<?>> j = new CachedSizeConcurrentLinkedQueue<>(); // Spigot, PAIL: Rename // Paper - Make size() constant-time
-    public final Deque<FutureTask<?>> taskQueue = (Deque<FutureTask<?>>) j; // SportBukkit - alias and downcast
+    protected final Deque<FutureTask<?>> j = new ConcurrentLinkedDeque<>(); // Spigot, PAIL: Rename // Paper - Make size() constant-time
+    public final Deque<FutureTask<?>> taskQueue = j; // SportBukkit - alias and downcast
     private Thread serverThread;
+
+    void setLastTickStart(long millis) { ab = millis; } // SportBukkit - alias
     private long ab = az();
 
     // CraftBukkit start
@@ -122,6 +132,13 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     public boolean serverAutoSave = false; // Paper
     // CraftBukkit end
 
+    // SportBukkit start
+    private final AtomicBoolean suspended = new AtomicBoolean(false);
+    private @Nullable Instant suspendedAt;
+    private int interruptions;
+    protected Thread watchdogThread;
+    // SportBukkit end
+
     public MinecraftServer(OptionSet options, Proxy proxy, File file1) {
         io.netty.util.ResourceLeakDetector.setEnabled( false ); // Spigot - disable
         this.e = proxy;
@@ -512,6 +529,86 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
     public void safeShutdown() {
         this.isRunning = false;
+        setSuspended(false); // SportBukkit
+    }
+
+    // SportBukkit start
+    public boolean isSuspended() {
+        return isRunning() && suspended.get();
+    }
+
+    public boolean canSuspend() {
+        return isRunning() && !q.hasClientConnections();
+    }
+
+    public boolean setSuspended(boolean suspend) {
+        if(suspend && !canSuspend()) return false;
+        if (!suspend) {
+            server.resetEmptySince();
+        }
+
+        if(suspended.compareAndSet(!suspend, suspend)) {
+            if(!isMainThread() && !suspend) {
+                synchronized(suspended) {
+                    suspended.notifyAll();
+                }
+            }
+            return true;
+        }
+
+        return false;
+    }
+
+    public @Nullable Instant suspendedAt() {
+        return suspendedAt;
+    }
+
+    public int interruptions() {
+        return interruptions;
+    }
+
+    private boolean doSuspension() {
+        if(isSuspended()) {
+            server.getPluginManager().callEvent(new ServerSuspendEvent(), (EventCallback) ev -> { // Cast needed due to javac bug
+                server.getLogger().info("Suspending server");
+                WatchdogThread.setSuspended(true);
+                suspendedAt = Instant.now();
+                interruptions = 0;
+
+                if(watchdogThread != null) watchdogThread.interrupt();
+
+                while(isSuspended()) {
+                    processTasks(); // Empty the task queue
+                    synchronized(suspended) {
+                        if(isSuspended()) { // Check suspended state again, in case a task resumed
+                            try { suspended.wait(); }
+                            catch(InterruptedException ignored) {}
+                            interruptions++;
+                        }
+                    }
+                }
+
+                if(watchdogThread != null) watchdogThread.interrupt();
+
+                interruptions = 0;
+                suspendedAt = null;
+                setLastTickStart(System.currentTimeMillis());
+                server.getLogger().info("Resuming server");
+                WatchdogThread.setSuspended(false);
+            });
+            return true;
+        }
+        return false;
+    }
+
+    public void interrupt() {
+        if(!isMainThread()) {
+            synchronized(suspended) {
+                if(suspended.get()) {
+                    suspended.notifyAll();
+                }
+            }
+        }
     }
 
     // PaperSpigot start - Further improve tick loop
@@ -596,7 +693,9 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                         }
                     }
                     if (wait > 0) {
-                        Thread.sleep(wait / 1000000);
+                        if (!doSuspension()) {
+                            Thread.sleep(wait / 1000000);
+                        }
                         wait = TICK_TIME - (curTime - lastTick);
                     }
 
@@ -778,6 +877,8 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         this.methodProfiler.a("jobs");
         processTasks();
         SpigotTimings.minecraftSchedulerTimer.stopTiming(); // Spigot
+        this.server.checkEmpty();
+        if(suspended.get()) return;
 
         this.methodProfiler.c("levels");
 
@@ -1554,10 +1655,10 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         Validate.notNull(callable);
         if (!this.isMainThread()) { // CraftBukkit && !this.isStopped()) {
             ListenableFutureTask listenablefuturetask = ListenableFutureTask.create(callable);
-            Queue queue = this.j;
 
             // Spigot start
             this.j.add(listenablefuturetask);
+            interrupt(); // SportBukkit
             return listenablefuturetask;
             // Spigot end
         } else {
@@ -1586,11 +1687,13 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     public void addMainThreadTask(boolean priority, FutureTask<?> task) {
         synchronized(taskQueue) {
             if(priority) {
+                //taskQueue.
                 taskQueue.addFirst(task);
             } else {
                 taskQueue.addLast(task);
             }
         }
+        interrupt();
     }
 
     public void addMainThreadTask(Runnable task) {
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 5b1bcb0e..cc6f993b 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -207,4 +207,10 @@ public class ServerConnection {
     public MinecraftServer d() {
         return this.f;
     }
+
+    // SportBukkit start
+    public boolean hasClientConnections() {
+        return !h.isEmpty();
+    }
+    // SportBukkit end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 3305d189..ce0cb9eb 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -5,6 +5,8 @@ import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.time.Duration;
+import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -20,6 +22,7 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
+import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
 
 import net.minecraft.server.*;
@@ -43,6 +46,7 @@ import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.command.PluginCommand;
 import org.bukkit.command.SimpleCommandMap;
 import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.conversations.Conversable;
@@ -101,6 +105,7 @@ import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
 import org.github.paperspigot.BukkitConfig;
+import org.github.paperspigot.PaperSpigotConfig;
 import org.github.paperspigot.SharedConfig;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
@@ -163,6 +168,8 @@ public final class CraftServer implements Server {
     private final UUID invalidUserUUID = UUID.nameUUIDFromBytes("InvalidUsername".getBytes(Charsets.UTF_8));
     private final List<CraftPlayer> playerView;
 
+    private @Nullable Instant emptySince;
+
     private final class BooleanWrapper {
         private boolean value = true;
     }
@@ -553,6 +560,16 @@ public final class CraftServer implements Server {
         return BukkitConfig.ticksPerMonsterSpawn;
     }
 
+    @Override
+    public @Nullable Duration getEmptyServerSuspendDelay() {
+        try {
+            return Duration.parse(PaperSpigotConfig.emptyServerSuspendDelay);
+        } catch(Exception e) {
+            getLogger().log(Level.SEVERE, "Invalid configuration value", e);
+            return null;
+        }
+    }
+
     @Override
     public PluginManager getPluginManager() {
         return pluginManager;
@@ -1671,6 +1688,59 @@ public final class CraftServer implements Server {
         return task instanceof Wrapped ? task : new Wrapped();
     }
 
+    @Override
+    public boolean isSuspended() {
+        return getServer().isSuspended();
+    }
+
+    @Override
+    public boolean canSuspend() {
+        return getServer().canSuspend();
+    }
+
+    @Override
+    public boolean setSuspended(boolean suspend) {
+        return getServer().setSuspended(suspend);
+    }
+
+    @Override
+    public @Nullable Instant suspendedAt() {
+        return getServer().suspendedAt();
+    }
+
+    @Override
+    public int interruptions() {
+        return getServer().interruptions();
+    }
+
+    @Override
+    public @Nullable Instant emptySince() {
+        if(getOnlinePlayers().isEmpty()) {
+            if(emptySince == null) {
+                emptySince = Instant.now();
+            }
+        } else {
+            emptySince = null;
+        }
+        return emptySince;
+    }
+
+    public void resetEmptySince() {
+        emptySince = null;
+    }
+
+    public void checkEmpty() {
+        final Instant since = emptySince();
+        if(since == null) {
+            setSuspended(false);
+        } else {
+            final Duration delay = getEmptyServerSuspendDelay();
+            if(delay != null && canSuspend() && !since.plus(delay).isAfter(Instant.now())) {
+                setSuspended(true);
+            }
+        }
+    }
+
     private final Spigot spigot = new Spigot()
     {
 
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index 9e3cdff8..31279983 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -122,6 +122,11 @@ public class PaperSpigotConfig
         tickEmptyWorlds = getBoolean("settings.tick-empty-worlds", tickEmptyWorlds);
     }
 
+    public static String emptyServerSuspendDelay = "PT1M";
+    private static void setEmptyServerSuspendDelay() {
+        emptyServerSuspendDelay = getString("settings.empty-server-suspend", emptyServerSuspendDelay);
+    }
+
     public static double strengthEffectModifier;
     public static double weaknessEffectModifier;
     private static void effectModifiers()
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index 06ad3826..8eba42e3 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -16,6 +16,7 @@ public class WatchdogThread extends Thread
     private final boolean restart;
     private volatile long lastTick;
     private volatile boolean stopping;
+    private volatile boolean isSuspended;
 
     private WatchdogThread(long timeoutTime, boolean restart)
     {
@@ -46,12 +47,26 @@ public class WatchdogThread extends Thread
         }
     }
 
+    public static void setSuspended(boolean suspended)
+    {
+        instance.isSuspended = suspended;
+    }
+
+    // SportBukkit start
+    synchronized private void doSuspension() {
+        while(this.isSuspended) {
+            try { wait(); } catch(InterruptedException ignored) {}
+        }
+    }
+    // SportBukkit end
+
     @Override
     public void run()
     {
         while ( !stopping )
         {
             //
+            doSuspension(); // SportBukkit
             if ( lastTick != 0 && System.currentTimeMillis() > lastTick + timeoutTime && !Boolean.getBoolean("disable.watchdog")) // Paper - Add property to disable
             {
                 Logger log = Bukkit.getServer().getLogger();
-- 
2.50.1

