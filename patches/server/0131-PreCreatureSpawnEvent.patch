From 059ee638926ae0e6630aa864ee88aec5454a2db0 Mon Sep 17 00:00:00 2001
From: cswhite2000 <18whitechristop@gmail.com>
Date: Mon, 20 Aug 2018 23:51:01 -0700
Subject: [PATCH] PreCreatureSpawnEvent

Adds an event to fire before an Entity is created, so that plugins that need to cancel
CreatureSpawnEvent can do so from this event instead.

Cancelling CreatureSpawnEvent rapidly causes a lot of garbage collection and CPU waste
as it's done after the Entity object has been fully created.

Mob Limiting plugins and blanket "ban this type of monster" plugins should use this event
instead and save a lot of server resources.

See: https://github.com/PaperMC/Paper/issues/917

diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index e54f7edb..c2a731f0 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -6,8 +6,10 @@ import java.util.List;
 
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.EntityType;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.SpawnerSpawnEvent;
+import org.github.paperspigot.event.entity.PreCreatureSpawnEvent;
 // CraftBukkit end
 
 public abstract class MobSpawnerAbstract {
@@ -91,6 +93,24 @@ public abstract class MobSpawnerAbstract {
                 boolean flag = false;
 
                 for (int i = 0; i < this.spawnCount; ++i) {
+                    // Paper start
+                    d0 = (double) blockposition.getX() + (this.a().random.nextDouble() - this.a().random.nextDouble()) * (double) this.spawnRange + 0.5D;
+                    double d3 = (double) (blockposition.getY() + this.a().random.nextInt(3) - 1);
+                    double d4 = (double) blockposition.getZ() + (this.a().random.nextDouble() - this.a().random.nextDouble()) * (double) this.spawnRange + 0.5D;
+
+                    EntityType type = EntityType.fromName(this.getMobName());
+                    if (type != null) {
+                        PreCreatureSpawnEvent event;
+                        event = new PreCreatureSpawnEvent(MCUtil.toLocation(this.a(), d0, d3, d4), type, CreatureSpawnEvent.SpawnReason.SPAWNER);
+                        if (!event.callEvent()) {
+                            flag = true;
+                            if (event.shouldAbortSpawn()) {
+                                break;
+                            }
+                            continue;
+                        }
+                    }
+                    // Paper end
                     Entity entity = EntityTypes.createEntityByName(this.getMobName(), this.a());
 
                     if (entity == null) {
@@ -104,9 +124,6 @@ public abstract class MobSpawnerAbstract {
                         return;
                     }
 
-                    d0 = (double) blockposition.getX() + (this.a().random.nextDouble() - this.a().random.nextDouble()) * (double) this.spawnRange + 0.5D;
-                    double d3 = (double) (blockposition.getY() + this.a().random.nextInt(3) - 1);
-                    double d4 = (double) blockposition.getZ() + (this.a().random.nextDouble() - this.a().random.nextDouble()) * (double) this.spawnRange + 0.5D;
                     EntityInsentient entityinsentient = entity instanceof EntityInsentient ? (EntityInsentient) entity : null;
 
                     entity.setPositionRotation(d0, d3, d4, this.a().random.nextFloat() * 360.0F, 0.0F);
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index a12ae12d..d840c181 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -9,7 +9,9 @@ import java.util.Set;
 // CraftBukkit start
 import org.bukkit.craftbukkit.util.LongHash;
 import org.bukkit.craftbukkit.util.LongHashSet;
+import org.bukkit.entity.EntityType;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+import org.github.paperspigot.event.entity.PreCreatureSpawnEvent;
 import org.github.paperspigot.exception.ServerInternalException;
 // CraftBukkit end
 
@@ -169,6 +171,20 @@ public final class SpawnerCreature {
                                                     }
 
                                                     if (worldserver.a(enumcreaturetype, biomebase_biomemeta, blockposition2) && a(EntityPositionTypes.a(biomebase_biomemeta.b), worldserver, blockposition2)) {
+                                                        // Paper start
+                                                        EntityType type = EntityTypes.clsToTypeMap.get(biomebase_biomemeta.b);
+                                                        if (type != null) {
+                                                            PreCreatureSpawnEvent event = new PreCreatureSpawnEvent(MCUtil.toLocation(worldserver, blockposition2), type, SpawnReason.NATURAL);
+                                                            if (!event.callEvent()) {
+                                                                if (event.shouldAbortSpawn()) {
+                                                                    continue label115;
+                                                                }
+                                                                j1 += l2;
+                                                                ++i4;
+                                                                continue;
+                                                            }
+                                                        }
+                                                        //Paper end
                                                         EntityInsentient entityinsentient;
 
                                                         try {
-- 
2.50.1

