From 13b5ea7340a9a0b346017c93c580ca8dac41c521 Mon Sep 17 00:00:00 2001
From: cswhite2000 <18whitechristop@gmail.com>
Date: Tue, 7 Aug 2018 02:05:13 -0700
Subject: [PATCH] Cancel piston retraction without creating client ghost blocks


diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index b582f4bc..cebbc641 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -136,6 +136,10 @@ public class BlockPiston extends Block {
         }
 
         if (i == 0) {
+            // SportBukkit start
+            org.bukkit.event.block.BlockPistonEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPistonEvent(world, blockposition, enumdirection, true);
+            if(event != null && event.isCancelled()) return false;
+            // SportBukkit end
             if (!this.a(world, blockposition, enumdirection, true)) {
                 return false;
             }
@@ -151,6 +155,10 @@ public class BlockPiston extends Block {
 
             world.setTypeAndData(blockposition, Blocks.PISTON_EXTENSION.getBlockData().set(BlockPistonMoving.FACING, enumdirection).set(BlockPistonMoving.TYPE, this.sticky ? BlockPistonExtension.EnumPistonType.STICKY : BlockPistonExtension.EnumPistonType.DEFAULT), 3);
             world.setTileEntity(blockposition, BlockPistonMoving.a(this.fromLegacyData(j), enumdirection, false, true));
+            // SportBukkit start
+            org.bukkit.event.block.BlockPistonEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPistonEvent(world, blockposition, enumdirection, false);
+            if(event != null && event.isCancelled()) return false;
+            // SportBukkit end
             if (this.sticky) {
                 BlockPosition blockposition1 = blockposition.a(enumdirection.getAdjacentX() * 2, enumdirection.getAdjacentY() * 2, enumdirection.getAdjacentZ() * 2);
                 Block block = world.getType(blockposition1).getBlock();
@@ -309,6 +317,7 @@ public class BlockPiston extends Block {
         if (!pistonextendschecker.a()) {
             return false;
         } else {
+            /* SportBukkit start - move this earlier so we can actually cancel the event
             // CraftBukkit start
             final org.bukkit.block.Block bblock = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
 
@@ -331,11 +340,13 @@ public class BlockPiston extends Block {
                     return bblock.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
                 }
             };
+            SportBukkit end */
 
             int i = list.size() + list1.size();
             Block[] ablock = new Block[i];
             EnumDirection enumdirection1 = flag ? enumdirection : enumdirection.opposite();
 
+            /* SportBukkit start
             org.bukkit.event.block.BlockPistonEvent event;
             if (flag) {
                 event = new BlockPistonExtendEvent(bblock, blocks, CraftBlock.notchToBlockFace(enumdirection1));
@@ -355,6 +366,7 @@ public class BlockPiston extends Block {
                 return false;
             }
             // CraftBukkit end
+            SportBukkit end */
 
             int j;
             BlockPosition blockposition1;
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 52adc874..e0300247 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.event;
 
 import java.net.InetAddress;
+import java.util.AbstractList;
 import java.util.ArrayList;
 import java.util.EnumMap;
 import java.util.List;
@@ -986,4 +987,59 @@ public class CraftEventFactory {
         return event;
     }
     // PaperSpigot end
+
+    public static BlockPistonEvent callBlockPistonEvent(final World world, BlockPosition pos, EnumDirection facing, boolean extending) {
+        // When retracting, PistonExtendsChecker expects the piston arm to already be
+        // removed, so we have to temporarily remove it or it will get in the way.
+        BlockPosition extensionPos = pos.shift(facing);
+        IBlockData extensionData = null;
+        if(!extending) {
+            extensionData = world.getType(extensionPos);
+            world.setTypeAndData(extensionPos, Blocks.AIR.getBlockData(), 0);
+        }
+
+        // This thing searches for all the blocks that will be moved. We have to use it twice,
+        // because it's too late to cancel by the time NMS calls it. A potential optimization
+        // would be to save this result and reuse it in the NMS code, but that's probably not
+        // worth the messy diff.
+        PistonExtendsChecker checker = new PistonExtendsChecker(world, pos, facing, extending);
+        boolean moved = checker.a();
+
+        if(extensionData != null) {
+            world.setTypeAndData(extensionPos, extensionData, 0);
+        }
+
+        // This means vanilla mechanics will obstruct the piston, so no need for any event.
+        if(!moved) return null;
+
+        // A sort of lazy list that avoids wrapping blocks until needed
+        final List movedBlocks = checker.getMovedBlocks();
+        final List brokenBlocks = checker.getBrokenBlocks();
+        List<org.bukkit.block.Block> blocks = new AbstractList<Block>() {
+            @Override
+            public int size() {
+                return movedBlocks.size() + brokenBlocks.size();
+            }
+
+            @Override
+            public org.bukkit.block.Block get(int index) {
+                if (index >= size() || index < 0) {
+                    throw new ArrayIndexOutOfBoundsException(index);
+                }
+                BlockPosition pos = (BlockPosition) (index < movedBlocks.size() ? movedBlocks.get(index) : brokenBlocks.get(index - movedBlocks.size()));
+                return world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            }
+        };
+
+        org.bukkit.block.Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+        BlockPistonEvent event;
+        if(extending) {
+            event = new BlockPistonExtendEvent(block, blocks, CraftBlock.notchToBlockFace(facing));
+        } else {
+            event = new BlockPistonRetractEvent(block, blocks, CraftBlock.notchToBlockFace(facing.opposite()));
+        }
+
+        world.getServer().getPluginManager().callEvent(event);
+        return event;
+    }
 }
-- 
2.50.1

