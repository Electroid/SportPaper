From 8272be199922ebfc7252ce026c03f21c98dd190c Mon Sep 17 00:00:00 2001
From: cswhite2000 <18whitechristop@gmail.com>
Date: Sun, 12 Aug 2018 13:29:19 -0700
Subject: [PATCH] Sanitise RegionFileCache and make configurable.

RegionFileCache prior to this patch would close every single open region
file upon reaching a size of 256.
This patch modifies that behaviour so it closes the the least recently
used RegionFile.
The implementation uses a LinkedHashMap as an LRU cache (modified from HashMap).
The maximum size of the RegionFileCache is also made configurable.

diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
index 4cfaf300..b78477e0 100644
--- a/src/main/java/net/minecraft/server/RegionFileCache.java
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Maps;
+import org.github.paperspigot.PaperSpigotConfig;
 import org.github.paperspigot.exception.ServerInternalException;
 
 import java.io.DataInputStream;
@@ -8,11 +9,12 @@ import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class RegionFileCache {
 
-    public static final Map<File, RegionFile> a = Maps.newHashMap(); // Spigot - private -> public
+    public static final Map<File, RegionFile> a = new LinkedHashMap(PaperSpigotConfig.regionFileCacheSize, 0.75f, true); // Spigot - private -> public, Paper - HashMap -> LinkedHashMap
 
     // PaperSpigot start
     public static synchronized RegionFile a(File file, int i, int j) {
@@ -32,8 +34,8 @@ public class RegionFileCache {
                 file1.mkdirs();
             }
 
-            if (RegionFileCache.a.size() >= 256) {
-                a();
+            if (RegionFileCache.a.size() >= PaperSpigotConfig.regionFileCacheSize) { // Paper
+                trimCache(); // Paper
             }
 
             RegionFile regionfile1 = new RegionFile(file2);
@@ -43,6 +45,22 @@ public class RegionFileCache {
         }
     }
 
+    // Paper Start
+    private static synchronized void trimCache() {
+        Iterator<Map.Entry<File, RegionFile>> itr = RegionFileCache.a.entrySet().iterator();
+        int count = RegionFileCache.a.size() - PaperSpigotConfig.regionFileCacheSize;
+        while (count-- >= 0 && itr.hasNext()) {
+            try {
+                itr.next().getValue().c();
+            } catch (IOException ioexception) {
+                ioexception.printStackTrace();
+                ServerInternalException.reportInternalException(ioexception);
+            }
+            itr.remove();
+        }
+    }
+    // Paper End
+
     public static synchronized void a() {
         Iterator iterator = RegionFileCache.a.values().iterator();
 
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index 08f58486..248b7f62 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -159,6 +159,11 @@ public class PaperSpigotConfig
         }
     }
 
+    public static int regionFileCacheSize = 256;
+    private static void regionFileCacheSize() {
+        regionFileCacheSize = getInt("settings.region-file-cache-size", 256);
+    }
+
     public static double strengthEffectModifier;
     public static double weaknessEffectModifier;
     private static void effectModifiers()
-- 
2.50.1

