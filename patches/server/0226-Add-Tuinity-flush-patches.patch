From eb932407129c8d64d2bc318e7d917c54b0c54c67 Mon Sep 17 00:00:00 2001
From: Christopher White <18whitechristop@gmail.com>
Date: Fri, 22 Sep 2023 15:58:16 -0700
Subject: [PATCH] Add Tuinity flush patches

These changes largely come from Spottedleaf's "Allow controlled flushing
for network manager" and "Consolidate flush calls for entity tracker
packets" patches

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 513e2c36..90fca5c6 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -964,7 +964,26 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 this.methodProfiler.b();
                 this.methodProfiler.a("tracker");
                 worldserver.timings.tracker.startTiming(); // Spigot
-                worldserver.getTracker().updatePlayers();
+                if(this.getPlayerList().getPlayerCount() != 0) // Tuinity
+                {
+                    // Tuinity start - controlled flush for entity tracker packets
+                    List<NetworkManager> disabledFlushes = new java.util.ArrayList<>(this.getPlayerList().getPlayerCount());
+                    for (EntityPlayer player : this.getPlayerList().players) {
+                        PlayerConnection connection = player.playerConnection;
+                        if (connection != null) {
+                            connection.networkManager.disableAutomaticFlush();
+                            disabledFlushes.add(connection.networkManager);
+                        }
+                    }
+                    try {
+                        worldserver.getTracker().updatePlayers();
+                    } finally {
+                        for (NetworkManager networkManager : disabledFlushes) {
+                            networkManager.enableAutomaticFlush();
+                        }
+                    }
+                    // Tuinity end - controlled flush for entity tracker packets
+                }
                 worldserver.timings.tracker.stopTiming(); // Spigot
                 this.methodProfiler.b();
                 this.methodProfiler.b();
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 9e35715a..1f14d087 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -17,6 +17,7 @@ import io.netty.util.AttributeKey;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.net.SocketAddress;
+import java.util.Iterator;
 import java.util.Queue;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.crypto.SecretKey;
@@ -76,6 +77,41 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     private boolean p;
     public int protocolVersion; // Paper
 
+    // Tuinity start - allow controlled flushing
+    volatile boolean canFlush = true;
+    private final java.util.concurrent.atomic.AtomicInteger packetWrites = new java.util.concurrent.atomic.AtomicInteger();
+    private int flushPacketsStart;
+    private final Object flushLock = new Object();
+
+    void disableAutomaticFlush() {
+        synchronized (this.flushLock) {
+            this.flushPacketsStart = this.packetWrites.get(); // must be volatile and before canFlush = false
+            this.canFlush = false;
+        }
+    }
+
+    void enableAutomaticFlush() {
+        synchronized (this.flushLock)
+        {
+            this.canFlush = true;
+            if (this.packetWrites.get() != this.flushPacketsStart) { // must be after canFlush = true
+                this.flush(); // only make the flush call if we need to
+            }
+        }
+    }
+
+    private final void flush()
+    {
+        if (this.channel.eventLoop().inEventLoop()) {
+            this.channel.flush();
+        } else {
+            this.channel.eventLoop().execute(() -> {
+                this.channel.flush();
+            });
+        }
+    }
+    // Tuinity end - allow controlled flushing
+
     public NetworkManager(EnumProtocolDirection enumprotocoldirection) {
         this.h = enumprotocoldirection;
     }
@@ -139,7 +175,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     public void handle(Packet packet) {
         if (this.g()) {
             this.m();
-            this.a(packet, (GenericFutureListener[]) null);
+            this.a(packet, (GenericFutureListener[]) null, Boolean.TRUE);
         } else {
             this.j.writeLock().lock();
 
@@ -155,7 +191,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     public void a(Packet packet, GenericFutureListener<? extends Future<? super Void>> genericfuturelistener, GenericFutureListener<? extends Future<? super Void>>... agenericfuturelistener) {
         if (this.g()) {
             this.m();
-            this.a(packet, (GenericFutureListener[]) ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener));
+            this.a(packet, (GenericFutureListener[]) ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener), Boolean.TRUE);
         } else {
             this.j.writeLock().lock();
 
@@ -168,10 +204,14 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
     }
 
-    private void a(final Packet packet, final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener) {
+    // dispatchPacket
+    private void a(final Packet packet, final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener, Boolean flushConditional) {
         final EnumProtocol enumprotocol = EnumProtocol.a(packet);
         final EnumProtocol enumprotocol1 = (EnumProtocol) this.channel.attr(NetworkManager.c).get();
 
+        boolean effectiveFlush = (flushConditional == null) ? this.canFlush : flushConditional.booleanValue();
+        boolean flush = (effectiveFlush || packet instanceof PacketPlayOutKeepAlive || packet instanceof PacketPlayOutKickDisconnect);
+
         if (enumprotocol1 != enumprotocol) {
             NetworkManager.g.debug("Disabled auto read");
             this.channel.config().setAutoRead(false);
@@ -182,7 +222,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
                 this.a(enumprotocol);
             }
 
-            ChannelFuture channelfuture = this.channel.writeAndFlush(packet);
+            ChannelFuture channelfuture = flush ? this.channel.writeAndFlush(packet) : this.channel.write(packet);
 
             if (agenericfuturelistener != null) {
                 channelfuture.addListeners(agenericfuturelistener);
@@ -196,7 +236,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
                         NetworkManager.this.a(enumprotocol);
                     }
 
-                    ChannelFuture channelfuture = NetworkManager.this.channel.writeAndFlush(packet);
+                    ChannelFuture channelfuture = flush ? NetworkManager.this.channel.writeAndFlush(packet) : NetworkManager.this.channel.write(packet);
 
                     if (agenericfuturelistener != null) {
                         channelfuture.addListeners(agenericfuturelistener);
@@ -209,15 +249,25 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
     }
 
+    // sendPacketQueue()
     private void m() {
+        if(this.i.isEmpty()) return;
         if (this.channel != null && this.channel.isOpen()) {
             this.j.readLock().lock();
+            boolean needsFlush = this.canFlush;
+            boolean hasWrotePacket = false;
 
             try {
-                while (!this.i.isEmpty()) {
-                    NetworkManager.QueuedPacket networkmanager_queuedpacket = (NetworkManager.QueuedPacket) this.i.poll();
-
-                    this.a(networkmanager_queuedpacket.a, networkmanager_queuedpacket.b);
+                Iterator<QueuedPacket> iterator = this.i.iterator();
+                while (iterator.hasNext()) {
+                    QueuedPacket queued = iterator.next();
+                    Packet packet = queued.a;
+                    if (hasWrotePacket && (needsFlush || this.canFlush)) {
+                        flush();
+                    }
+                    iterator.remove();
+                    this.a(packet, queued.b, (!iterator.hasNext() && (needsFlush || this.canFlush)) ? Boolean.TRUE : Boolean.FALSE);
+                    hasWrotePacket = true;
                 }
             } finally {
                 this.j.readLock().unlock();
-- 
2.50.1

