From 2431bba19b7dfd456d5f1cb8125da3af7c4a4513 Mon Sep 17 00:00:00 2001
From: cswhite2000 <18whitechristop@gmail.com>
Date: Sat, 25 Aug 2018 18:36:14 -0700
Subject: [PATCH] Unify Configs


diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index f109351f..cb98ea2a 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -24,6 +24,7 @@ import co.aikar.timings.SpigotTimings; // Spigot
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.github.paperspigot.SharedConfig;
 // CraftBukkit end
 
 public class DedicatedServer extends MinecraftServer implements IMinecraftServer {
@@ -174,13 +175,8 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             }
             // Spigot start
             this.a((PlayerList) (new DedicatedPlayerList(this)));
-            org.spigotmc.SpigotConfig.init((File) options.valueOf("spigot-settings"));
-            org.spigotmc.SpigotConfig.registerCommands();
             // Spigot end
-            // PaperSpigot start
-            org.github.paperspigot.PaperSpigotConfig.init((File) options.valueOf("paper-settings"));
-            org.github.paperspigot.PaperSpigotConfig.registerCommands();
-            // PaperSpigot end
+            SharedConfig.registerCommands();
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
@@ -282,16 +278,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                     this.remoteConsole = new org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender(); // CraftBukkit
                 }
 
-                // CraftBukkit start
-                if (this.server.getBukkitSpawnRadius() > -1) {
-                    DedicatedServer.LOGGER.info("'settings.spawn-radius' in bukkit.yml has been moved to 'spawn-protection' in server.properties. I will move your config for you.");
-                    this.propertyManager.properties.remove("spawn-protection");
-                    this.propertyManager.getInt("spawn-protection", this.server.getBukkitSpawnRadius());
-                    this.server.removeBukkitSpawnRadius();
-                    this.propertyManager.savePropertiesFile();
-                }
-                // CraftBukkit end
-
         if (org.spigotmc.SpigotConfig.lateBind) {
             try {
                 this.aq().a(inetaddress, this.R());
diff --git a/src/main/java/net/minecraft/server/PropertyManager.java b/src/main/java/net/minecraft/server/PropertyManager.java
index 0ee7fe8a..db362e51 100644
--- a/src/main/java/net/minecraft/server/PropertyManager.java
+++ b/src/main/java/net/minecraft/server/PropertyManager.java
@@ -54,7 +54,7 @@ public class PropertyManager {
     }
 
     private <T> T getOverride(String name, T value) {
-        if ((this.options != null) && (this.options.has(name)) && !name.equals( "online-mode")) { // Spigot
+        if ((this.options != null) && (this.options.has(name))) { // Spigot
             return (T) this.options.valueOf(name);
         }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 07427860..e6899775 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -186,8 +186,8 @@ public abstract class World implements IBlockAccess {
     }
 
     protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
-        this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
-        this.paperSpigotConfig = new org.github.paperspigot.PaperSpigotWorldConfig( worlddata.getName() ); // PaperSpigot
+        this.spigotConfig = new org.spigotmc.SpigotWorldConfig(); // Spigot
+        this.paperSpigotConfig = new org.github.paperspigot.PaperSpigotWorldConfig(); // PaperSpigot
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java b/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
index 89983726..e08afce5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
@@ -24,7 +24,6 @@ public class CraftCrashReport implements Callable<Object> {
                 value.append(' ').append(description.getFullName()).append(' ').append(description.getMain()).append(' ').append(Arrays.toString(description.getAuthors().toArray())).append(',');
             }
             value.append("}\n   Warnings: ").append(Bukkit.getWarningState().name());
-            value.append("\n   Reload Count: ").append(String.valueOf(MinecraftServer.getServer().server.reloadCount));
             value.append("\n   Threads: {");
             for (Map.Entry<Thread, ? extends Object[]> entry : Thread.getAllStackTraces().entrySet()) {
                 value.append(' ').append(entry.getKey().getState().name()).append(' ').append(entry.getKey().getName()).append(": ").append(Arrays.toString(entry.getValue())).append(',');
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 5c2a18dd..4dc6ebfc 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -102,6 +102,8 @@ import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.github.paperspigot.BukkitConfig;
+import org.github.paperspigot.SharedConfig;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
@@ -140,8 +142,6 @@ public final class CraftServer implements Server {
     protected final MinecraftServer console;
     protected final DedicatedPlayerList playerList;
     private final Map<String, World> worlds = new LinkedHashMap<String, World>();
-    private YamlConfiguration configuration;
-    private YamlConfiguration commandsConfiguration;
     private final Yaml yaml = new Yaml(new SafeConstructor());
     private final Map<UUID, OfflinePlayer> offlinePlayers = new MapMaker().softValues().makeMap();
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
@@ -164,7 +164,6 @@ public final class CraftServer implements Server {
     private final Pattern validUserPattern = Pattern.compile("^[a-zA-Z0-9_]{2,16}$");
     private final UUID invalidUserUUID = UUID.nameUUIDFromBytes("InvalidUsername".getBytes(Charsets.UTF_8));
     private final List<CraftPlayer> playerView;
-    public int reloadCount;
 
     private final class BooleanWrapper {
         private boolean value = true;
@@ -202,52 +201,18 @@ public final class CraftServer implements Server {
             getLogger().info("Console input is disabled due to --noconsole command argument");
         }
 
-        configuration = YamlConfiguration.loadConfiguration(getConfigFile());
-        configuration.options().copyDefaults(true);
-        configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
-        ConfigurationSection legacyAlias = null;
-        if (!configuration.isString("aliases")) {
-            legacyAlias = configuration.getConfigurationSection("aliases");
-            configuration.set("aliases", "now-in-commands.yml");
-        }
-        saveConfig();
-        if (getCommandsConfigFile().isFile()) {
-            legacyAlias = null;
-        }
-        commandsConfiguration = YamlConfiguration.loadConfiguration(getCommandsConfigFile());
-        commandsConfiguration.options().copyDefaults(true);
-        commandsConfiguration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/commands.yml"), Charsets.UTF_8)));
-        saveCommandsConfig();
-
-        // Migrate aliases from old file and add previously implicit $1- to pass all arguments
-        if (legacyAlias != null) {
-            ConfigurationSection aliases = commandsConfiguration.createSection("aliases");
-            for (String key : legacyAlias.getKeys(false)) {
-                ArrayList<String> commands = new ArrayList<String>();
-
-                if (legacyAlias.isList(key)) {
-                    for (String command : legacyAlias.getStringList(key)) {
-                        commands.add(command + " $1-");
-                    }
-                } else {
-                    commands.add(legacyAlias.getString(key) + " $1-");
-                }
-
-                aliases.set(key, commands);
-            }
-        }
+        SharedConfig.init((File) console.options.valueOf("sportpaper-settings")); // SportPaper
 
-        saveCommandsConfig();
-        overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
-        ((SimplePluginManager) pluginManager).useTimings(configuration.getBoolean("settings.plugin-profiling"));
-        monsterSpawn = configuration.getInt("spawn-limits.monsters");
-        animalSpawn = configuration.getInt("spawn-limits.animals");
-        waterAnimalSpawn = configuration.getInt("spawn-limits.water-animals");
-        ambientSpawn = configuration.getInt("spawn-limits.ambient");
-        console.autosavePeriod = configuration.getInt("ticks-per.autosave");
-        warningState = WarningState.value(configuration.getString("settings.deprecated-verbose"));
-        chunkGCPeriod = configuration.getInt("chunk-gc.period-in-ticks");
-        chunkGCLoadThresh = configuration.getInt("chunk-gc.load-threshold");
+        overrideAllCommandBlockCommands = SharedConfig.config.getStringList("commands.command-block-overrides").contains("*");
+        ((SimplePluginManager) pluginManager).useTimings(BukkitConfig.pluginProfiling);
+        monsterSpawn = BukkitConfig.monsterSpawnLimit;
+        animalSpawn = BukkitConfig.animalSpawnLimit;
+        waterAnimalSpawn = BukkitConfig.waterAnimalSpawnLimit;
+        ambientSpawn = BukkitConfig.ambientSpawnLimit;
+        console.autosavePeriod = BukkitConfig.ticksPerAutosave;
+        warningState = WarningState.value(BukkitConfig.deprecatedVerbose);
+        chunkGCPeriod = BukkitConfig.chunkGCPeriodInTicks;
+        chunkGCLoadThresh = BukkitConfig.chunkGCLoadThreshold;
         loadIcon();
 
         // Spigot Start - Moved to old location of new DedicatedPlayerList in DedicatedServer
@@ -257,31 +222,7 @@ public final class CraftServer implements Server {
     }
 
     public boolean getCommandBlockOverride(String command) {
-        return overrideAllCommandBlockCommands || commandsConfiguration.getStringList("command-block-overrides").contains(command);
-    }
-
-    private File getConfigFile() {
-        return (File) console.options.valueOf("bukkit-settings");
-    }
-
-    private File getCommandsConfigFile() {
-        return (File) console.options.valueOf("commands-settings");
-    }
-
-    private void saveConfig() {
-        try {
-            configuration.save(getConfigFile());
-        } catch (IOException ex) {
-            Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + getConfigFile(), ex);
-        }
-    }
-
-    private void saveCommandsConfig() {
-        try {
-            commandsConfiguration.save(getCommandsConfigFile());
-        } catch (IOException ex) {
-            Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + getCommandsConfigFile(), ex);
-        }
+        return overrideAllCommandBlockCommands || SharedConfig.config.getStringList("commands.command-block-overrides").contains(command);
     }
 
     public void loadPlugins() {
@@ -547,7 +488,7 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean getAllowEnd() {
-        return this.configuration.getBoolean("settings.allow-end");
+        return BukkitConfig.allowEnd;
     }
 
     @Override
@@ -556,11 +497,11 @@ public final class CraftServer implements Server {
     }
 
     public boolean getWarnOnOverload() {
-        return this.configuration.getBoolean("settings.warn-on-overload");
+        return BukkitConfig.warnOnOverlaod;
     }
 
     public boolean getQueryPlugins() {
-        return this.configuration.getBoolean("settings.query-plugins");
+        return BukkitConfig.queryPlugins;
     }
 
     @Override
@@ -585,12 +526,12 @@ public final class CraftServer implements Server {
 
     @Override
     public String getUpdateFolder() {
-        return this.configuration.getString("settings.update-folder", "update");
+        return BukkitConfig.updateFolder;
     }
 
     @Override
     public File getUpdateFolderFile() {
-        return new File((File) console.options.valueOf("plugins"), this.configuration.getString("settings.update-folder", "update"));
+        return new File((File) console.options.valueOf("plugins"), getUpdateFolder());
     }
 
     @Override
@@ -599,19 +540,19 @@ public final class CraftServer implements Server {
         if (org.spigotmc.SpigotConfig.bungee) {
             return -1;
         } else {
-            return this.configuration.getInt("settings.connection-throttle");
+            return BukkitConfig.connectionThrottle;
         }
         // Spigot End
     }
 
     @Override
     public int getTicksPerAnimalSpawns() {
-        return this.configuration.getInt("ticks-per.animal-spawns");
+        return BukkitConfig.ticksPerAnimalSpawn;
     }
 
     @Override
     public int getTicksPerMonsterSpawns() {
-        return this.configuration.getInt("ticks-per.monster-spawns");
+        return BukkitConfig.ticksPerMonsterSpawn;
     }
 
     @Override
@@ -696,113 +637,6 @@ public final class CraftServer implements Server {
         return false;
     }
 
-    @Override
-    public void reload() {
-        reloadCount++;
-        configuration = YamlConfiguration.loadConfiguration(getConfigFile());
-        commandsConfiguration = YamlConfiguration.loadConfiguration(getCommandsConfigFile());
-        PropertyManager config = new PropertyManager(console.options);
-
-        ((DedicatedServer) console).propertyManager = config;
-
-        boolean animals = config.getBoolean("spawn-animals", console.getSpawnAnimals());
-        boolean monsters = config.getBoolean("spawn-monsters", console.worlds.get(0).getDifficulty() != EnumDifficulty.PEACEFUL);
-        EnumDifficulty difficulty = EnumDifficulty.getById(config.getInt("difficulty", console.worlds.get(0).getDifficulty().ordinal()));
-
-        online.value = config.getBoolean("online-mode", console.getOnlineMode());
-        console.setSpawnAnimals(config.getBoolean("spawn-animals", console.getSpawnAnimals()));
-        console.setPVP(config.getBoolean("pvp", console.getPVP()));
-        console.setAllowFlight(config.getBoolean("allow-flight", console.getAllowFlight()));
-        console.setMotd(config.getString("motd", console.getMotd()));
-        monsterSpawn = configuration.getInt("spawn-limits.monsters");
-        animalSpawn = configuration.getInt("spawn-limits.animals");
-        waterAnimalSpawn = configuration.getInt("spawn-limits.water-animals");
-        ambientSpawn = configuration.getInt("spawn-limits.ambient");
-        warningState = WarningState.value(configuration.getString("settings.deprecated-verbose"));
-        printSaveWarning = false;
-        console.autosavePeriod = configuration.getInt("ticks-per.autosave");
-        chunkGCPeriod = configuration.getInt("chunk-gc.period-in-ticks");
-        chunkGCLoadThresh = configuration.getInt("chunk-gc.load-threshold");
-        loadIcon();
-
-        try {
-            playerList.getIPBans().load();
-        } catch (IOException ex) {
-            logger.log(Level.WARNING, "Failed to load banned-ips.json, " + ex.getMessage());
-        }
-        try {
-            playerList.getProfileBans().load();
-        } catch (IOException ex) {
-            logger.log(Level.WARNING, "Failed to load banned-players.json, " + ex.getMessage());
-        }
-
-        org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
-        org.github.paperspigot.PaperSpigotConfig.init((File) console.options.valueOf("paper-settings")); // PaperSpigot
-        for (WorldServer world : console.worlds) {
-            world.worldData.setDifficulty(difficulty);
-            world.setSpawnFlags(monsters, animals);
-            if (this.getTicksPerAnimalSpawns() < 0) {
-                world.ticksPerAnimalSpawns = 400;
-            } else {
-                world.ticksPerAnimalSpawns = this.getTicksPerAnimalSpawns();
-            }
-
-            if (this.getTicksPerMonsterSpawns() < 0) {
-                world.ticksPerMonsterSpawns = 1;
-            } else {
-                world.ticksPerMonsterSpawns = this.getTicksPerMonsterSpawns();
-            }
-            world.spigotConfig.init(); // Spigot
-            world.paperSpigotConfig.init(); // PaperSpigot
-        }
-
-        Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
-        pluginManager.clearPlugins();
-        commandMap.clearCommands();
-
-        // Paper start
-        for (Plugin plugin : pluginClone) {
-            entityMetadata.removeAll(plugin);
-            worldMetadata.removeAll(plugin);
-            playerMetadata.removeAll(plugin);
-        }
-        // Paper end
-
-        resetRecipes();
-        org.spigotmc.SpigotConfig.registerCommands(); // Spigot
-        org.github.paperspigot.PaperSpigotConfig.registerCommands(); // PaperSpigot
-
-        overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
-
-        int pollCount = 0;
-
-        // Wait for at most 2.5 seconds for plugins to close their threads
-        while (pollCount < 50 && getScheduler().getActiveWorkers().size() > 0) {
-            try {
-                Thread.sleep(50);
-            } catch (InterruptedException e) {}
-            pollCount++;
-        }
-
-        List<BukkitWorker> overdueWorkers = getScheduler().getActiveWorkers();
-        for (BukkitWorker worker : overdueWorkers) {
-            Plugin plugin = worker.getOwner();
-            String author = "<NoAuthorGiven>";
-            if (plugin.getDescription().getAuthors().size() > 0) {
-                author = plugin.getDescription().getAuthors().get(0);
-            }
-            getLogger().log(Level.SEVERE, String.format(
-                "Nag author: '%s' of '%s' about the following: %s",
-                author,
-                plugin.getDescription().getName(),
-                "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
-            ));
-        }
-        loadPlugins();
-        enablePlugins(PluginLoadOrder.STARTUP);
-        enablePlugins(PluginLoadOrder.POSTWORLD);
-    }
-
     private void loadIcon() {
         icon = new CraftIconCache(null);
         try {
@@ -817,7 +651,7 @@ public final class CraftServer implements Server {
 
     @SuppressWarnings({ "unchecked", "finally" })
     private void loadCustomPermissions() {
-        File file = new File(configuration.getString("settings.permissions-file"));
+        File file = new File(BukkitConfig.permissionsFile);
         FileInputStream stream;
 
         try {
@@ -1148,11 +982,11 @@ public final class CraftServer implements Server {
         Validate.notNull(config, "Config cannot be null");
 
         DataSourceConfig ds = new DataSourceConfig();
-        ds.setDriver(configuration.getString("database.driver"));
-        ds.setUrl(configuration.getString("database.url"));
-        ds.setUsername(configuration.getString("database.username"));
-        ds.setPassword(configuration.getString("database.password"));
-        ds.setIsolationLevel(TransactionIsolation.getLevel(configuration.getString("database.isolation")));
+        ds.setDriver(BukkitConfig.databaseDriver);
+        ds.setUrl(BukkitConfig.databaseUrl);
+        ds.setUsername(BukkitConfig.databaseUsername);
+        ds.setPassword(BukkitConfig.databasePassword);
+        ds.setIsolationLevel(TransactionIsolation.getLevel(BukkitConfig.databaseIsolation));
 
         if (ds.getDriver().contains("sqlite")) {
             config.setDatabasePlatform(new SQLitePlatform());
@@ -1223,7 +1057,8 @@ public final class CraftServer implements Server {
 
     @Override
     public Map<String, String[]> getCommandAliases() {
-        ConfigurationSection section = commandsConfiguration.getConfigurationSection("aliases");
+
+        ConfigurationSection section = SharedConfig.config.getConfigurationSection("commands.aliases");
         Map<String, String[]> result = new LinkedHashMap<String, String[]>();
 
         if (section != null) {
@@ -1243,18 +1078,13 @@ public final class CraftServer implements Server {
         return result;
     }
 
-    public void removeBukkitSpawnRadius() {
-        configuration.set("settings.spawn-radius", null);
-        saveConfig();
-    }
-
     public int getBukkitSpawnRadius() {
-        return configuration.getInt("settings.spawn-radius", -1);
+        return -1;
     }
 
     @Override
     public String getShutdownMessage() {
-        return configuration.getString("settings.shutdown-message");
+        return BukkitConfig.shutdownMessage;
     }
 
     @Override
@@ -1264,8 +1094,9 @@ public final class CraftServer implements Server {
 
     @Override
     public void setSpawnRadius(int value) {
-        configuration.set("settings.spawn-radius", value);
-        saveConfig();
+        PropertyManager propertyManager = ((DedicatedServer) console).propertyManager;
+        propertyManager.setProperty("spawn-protection", value);
+        propertyManager.savePropertiesFile();
     }
 
     @Override
@@ -1285,11 +1116,11 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean useExactLoginLocation() {
-        return configuration.getBoolean("settings.use-exact-login-location");
+        return BukkitConfig.useExactLoginLocation;
     }
 
     public ChunkGenerator getGenerator(String world) {
-        ConfigurationSection section = configuration.getConfigurationSection("worlds");
+        ConfigurationSection section = BukkitConfig.getConfigurationSection("worlds");
         ChunkGenerator result = null;
 
         if (section != null) {
@@ -1550,7 +1381,7 @@ public final class CraftServer implements Server {
         }
 
         if (container == null) {
-            container = new File(configuration.getString("settings.world-container", "."));
+            container = new File(BukkitConfig.worldContainer);
         }
 
         return container;
@@ -1845,7 +1676,7 @@ public final class CraftServer implements Server {
         @Override
         public YamlConfiguration getBukkitConfig()
         {
-            return configuration;
+            return BukkitConfig.config;
         }
 
         @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 8a4a0d84..337c665c 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -64,6 +64,46 @@ public class Main {
                         .ofType(Integer.class)
                         .describedAs("Server size");
 
+                acceptsAll(asList("allow-flight"), "Whether the server allows flight")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .describedAs("Allow Flight");
+
+                acceptsAll(asList("allow-nether"), "Whether the server allows the nether")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .describedAs("Allow Nether");
+
+                acceptsAll(asList("announce-player-achievements"),"Whether to announce player achievements")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .describedAs("Announce Player Achievements");
+
+                acceptsAll(asList("pvp"), "Whether to enable pvp")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .describedAs("PVP");
+
+                acceptsAll(asList("gamemode"), "Default gamemode")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("Gamemode");
+
+                acceptsAll(asList("network-compression-threshold"), "Network compression threshold")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("Network Compression Threshold");
+
+                acceptsAll(asList("view-distance"), "Server View Distance")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("View Distance");
+
+                acceptsAll(asList("difficulty"), "Server Difficulty")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("difficulty");
+
                 acceptsAll(asList("d", "date-format"), "Format of the date to display in the console (for log entries)")
                         .withRequiredArg()
                         .ofType(SimpleDateFormat.class)
@@ -95,12 +135,6 @@ public class Main {
 
                 acceptsAll(asList("log-strip-color"), "Strips color codes from log file");
 
-                acceptsAll(asList("b", "bukkit-settings"), "File for bukkit settings")
-                        .withRequiredArg()
-                        .ofType(File.class)
-                        .defaultsTo(new File("bukkit.yml"))
-                        .describedAs("Yml file");
-
                 acceptsAll(asList("C", "commands-settings"), "File for command settings")
                         .withRequiredArg()
                         .ofType(File.class)
@@ -115,21 +149,13 @@ public class Main {
 
                 acceptsAll(asList("demo"), "Demo mode");
 
-                // Spigot Start
-                acceptsAll(asList("S", "spigot-settings"), "File for spigot settings")
-                        .withRequiredArg()
-                        .ofType(File.class)
-                        .defaultsTo(new File("spigot.yml"))
-                        .describedAs("Yml file");
-                // Spigot End
-
-                // PaperSpigot Start
-                acceptsAll(asList("paper", "paper-settings"), "File for paperspigot settings")
+                // SportPaper start
+                acceptsAll(asList("SP", "sportpaper-settings"), "File for sportpaper settings")
                         .withRequiredArg()
                         .ofType(File.class)
-                        .defaultsTo(new File("paper.yml"))
+                        .defaultsTo(new File("sportpaper.yml"))
                         .describedAs("Yml file");
-                // PaperSpigot End
+                // SportPaper end
 
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
diff --git a/src/main/java/org/github/paperspigot/BukkitConfig.java b/src/main/java/org/github/paperspigot/BukkitConfig.java
new file mode 100644
index 00000000..169673d6
--- /dev/null
+++ b/src/main/java/org/github/paperspigot/BukkitConfig.java
@@ -0,0 +1,125 @@
+package org.github.paperspigot;
+
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.util.List;
+import java.util.Map;
+
+public class BukkitConfig {
+
+    public static YamlConfiguration config;
+    static Map<String, Command> commands;
+
+    public static void init()
+    {
+        config = SharedConfig.config;
+        commands = SharedConfig.commands;
+        SharedConfig.readConfig( BukkitConfig.class, null );
+    }
+
+    private static boolean getBoolean(String path, boolean def)
+    {
+        path = "bukkit." + path;
+        config.addDefault( path, def );
+        return config.getBoolean( path, config.getBoolean( path ) );
+    }
+
+    private static double getDouble(String path, double def)
+    {
+        path = "bukkit." + path;
+        config.addDefault( path, def );
+        return config.getDouble( path, config.getDouble( path ) );
+    }
+
+    private static int getInt(String path, int def)
+    {
+        path = "bukkit." + path;
+        config.addDefault( path, def );
+        return config.getInt( path, config.getInt( path ) );
+    }
+
+    private static <T> List getList(String path, T def)
+    {
+        path = "bukkit." + path;
+        config.addDefault( path, def );
+        return (List<T>) config.getList( path, config.getList( path ) );
+    }
+
+    private static String getString(String path, String def)
+    {
+        path = "bukkit." + path;
+        config.addDefault( path, def );
+        return config.getString( path, config.getString( path ) );
+    }
+
+    public static ConfigurationSection getConfigurationSection(String path) {
+        return config.getConfigurationSection("bukkit." + path);
+    }
+
+    public static boolean allowEnd = true;
+    public static boolean warnOnOverlaod = true;
+    public static String permissionsFile = "permissions.yml";
+    public static String updateFolder = "update";
+    public static boolean pluginProfiling = false;
+    public static int connectionThrottle = 4000;
+    public static boolean queryPlugins = true;
+    public static String deprecatedVerbose = "default";
+    public static String shutdownMessage = "Server closed";
+    public static boolean useExactLoginLocation = false;
+    public static String worldContainer = ".";
+    private static void settings() {
+        allowEnd = getBoolean("settings.allow-end", allowEnd);
+        warnOnOverlaod = getBoolean("settings.warn-on-overload", warnOnOverlaod);
+        permissionsFile = getString("settings.update-folder", updateFolder);
+        pluginProfiling = getBoolean("settings.plugin-profilling", pluginProfiling);
+        connectionThrottle = getInt("settings.connection-throttle", connectionThrottle);
+        queryPlugins = getBoolean("settings.query-plugins", queryPlugins);
+        deprecatedVerbose = getString("settings.deprecated-verbose", deprecatedVerbose);
+        shutdownMessage = getString("settings.shutdown-message", shutdownMessage);
+        useExactLoginLocation = getBoolean("settings.use-exact-login-location", useExactLoginLocation);
+        worldContainer = getString("settings.world-container", worldContainer);
+    }
+
+    public static int monsterSpawnLimit = 70;
+    public static int animalSpawnLimit = 15;
+    public static int waterAnimalSpawnLimit = 5;
+    public static int ambientSpawnLimit = 15;
+    private static void spawnLimits() {
+        monsterSpawnLimit = getInt("spawn-limits.monsters", monsterSpawnLimit);
+        animalSpawnLimit = getInt("spawn-limits.animals", animalSpawnLimit);
+        waterAnimalSpawnLimit = getInt("spawn-limits.water-animals", waterAnimalSpawnLimit);
+        ambientSpawnLimit = getInt("spawn-limits.ambient", ambientSpawnLimit);
+    }
+
+    public static int chunkGCPeriodInTicks = 600;
+    public static int chunkGCLoadThreshold = 0;
+    private static void chunkGC() {
+        chunkGCPeriodInTicks = getInt("chunk-gc.period-in-ticks", chunkGCPeriodInTicks);
+        chunkGCLoadThreshold = getInt("chunk-gc.load-threshold", chunkGCLoadThreshold);
+    }
+
+    public static int ticksPerAnimalSpawn = 400;
+    public static int ticksPerMonsterSpawn = 1;
+    public static int ticksPerAutosave = 6000;
+    private static void ticksPer() {
+        ticksPerAnimalSpawn = getInt("ticks-per.animal-spawns", ticksPerAnimalSpawn);
+        ticksPerMonsterSpawn = getInt("ticks-per.monster-spawns", ticksPerMonsterSpawn);
+        ticksPerAutosave = getInt("ticks-per.autosave", ticksPerAutosave);
+    }
+
+    public static String databaseUsername = "bukkit";
+    public static String databaseIsolation = "SERIALIZABLE";
+    public static String databaseDriver = "org.sqlite.JDBC";
+    public static String databasePassword = "walrus";
+    public static String databaseUrl = "jdbc:sqlite:{DIR}{NAME}.db";
+    private static void database() {
+        databaseUsername = getString("database.username", databaseUsername);
+        databaseIsolation = getString("database.isolation", databaseIsolation);
+        databaseDriver = getString("database.driver", databaseDriver);
+        databasePassword = getString("database.password", databasePassword);
+        databaseUrl = getString("database.url", databaseUrl);
+    }
+
+}
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index 142a5faf..9e3cdff8 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -1,144 +1,60 @@
 package org.github.paperspigot;
 
-import com.google.common.base.Throwables;
-import java.io.File;
-import java.io.IOException;
 import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.*;
 import java.util.logging.Level;
 
-import net.minecraft.server.Item;
 import net.minecraft.server.Items;
-import net.minecraft.server.MinecraftServer;
 import org.apache.commons.lang.StringUtils;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.command.Command;
-import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 
 public class PaperSpigotConfig
 {
-
-    private static File CONFIG_FILE;
-    private static final String HEADER = "This is the main configuration file for PaperSpigot.\n"
-            + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
-            + "with caution, and make sure you know what each option does before configuring.\n"
-            + "\n"
-            + "If you need help with the configuration or have any questions related to PaperSpigot,\n"
-            + "join us at the IRC.\n"
-            + "\n"
-            + "IRC: #paperspigot @ irc.spi.gt ( http://irc.spi.gt/iris/?channels=PaperSpigot )\n";
-    /*========================================================================*/
     public static YamlConfiguration config;
-    static int version;
     static Map<String, Command> commands;
-    /*========================================================================*/
-
-    public static void init(File configFile)
-    {
-        CONFIG_FILE = configFile;
-        config = new YamlConfiguration();
-        try
-        {
-            config.load ( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-        } catch ( InvalidConfigurationException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not load paper.yml, please correct your syntax errors", ex );
-            throw Throwables.propagate( ex );
-        }
-        config.options().header( HEADER );
-        config.options().copyDefaults( true );
-
-        commands = new HashMap<String, Command>();
-
-        version = getInt( "config-version", 9 );
-        set( "config-version", 9 );
-        readConfig( PaperSpigotConfig.class, null );
-    }
-
-    public static void registerCommands()
-    {
-        for ( Map.Entry<String, Command> entry : commands.entrySet() )
-        {
-            MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "PaperSpigot", entry.getValue() );
-        }
-    }
-
-    static void readConfig(Class<?> clazz, Object instance)
-    {
-        for ( Method method : clazz.getDeclaredMethods() )
-        {
-            if ( Modifier.isPrivate( method.getModifiers() ) )
-            {
-                if ( method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE )
-                {
-                    try
-                    {
-                        method.setAccessible( true );
-                        method.invoke( instance );
-                    } catch ( InvocationTargetException ex )
-                    {
-                        throw Throwables.propagate( ex.getCause() );
-                    } catch ( Exception ex )
-                    {
-                        Bukkit.getLogger().log( Level.SEVERE, "Error invoking " + method, ex );
-                    }
-                }
-            }
-        }
-
-        try
-        {
-            config.save( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not save " + CONFIG_FILE, ex );
-        }
-    }
 
-    private static void set(String path, Object val)
+    public static void init()
     {
-        config.set( path, val );
+        config = SharedConfig.config;
+        commands = SharedConfig.commands;
+        SharedConfig.readConfig( PaperSpigotConfig.class, null );
     }
 
     private static boolean getBoolean(String path, boolean def)
     {
+        path = "paper." + path;
         config.addDefault( path, def );
         return config.getBoolean( path, config.getBoolean( path ) );
     }
 
     private static double getDouble(String path, double def)
     {
+        path = "paper." + path;
         config.addDefault( path, def );
         return config.getDouble( path, config.getDouble( path ) );
     }
 
-    private static float getFloat(String path, float def)
-    {
-        // TODO: Figure out why getFloat() always returns the default value.
-        return (float) getDouble( path, (double) def );
-    }
-
     private static int getInt(String path, int def)
     {
+        path = "paper." + path;
         config.addDefault( path, def );
         return config.getInt( path, config.getInt( path ) );
     }
 
     private static <T> List getList(String path, T def)
     {
+        path = "paper." + path;
         config.addDefault( path, def );
         return (List<T>) config.getList( path, config.getList( path ) );
     }
 
     private static String getString(String path, String def)
     {
+        path = "paper." + path;
         config.addDefault( path, def );
         return config.getString( path, config.getString( path ) );
     }
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
index abfa8a71..abe82f36 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
@@ -8,27 +8,17 @@ import org.bukkit.configuration.file.YamlConfiguration;
 
 public class PaperSpigotWorldConfig
 {
+    private static YamlConfiguration config;
+    private static boolean verbose;
 
-    private final String worldName;
-    private final YamlConfiguration config;
-    private boolean verbose;
-
-    public PaperSpigotWorldConfig(String worldName)
-    {
-        this.worldName = worldName;
-        this.config = PaperSpigotConfig.config;
-        init();
-    }
-
-    public void init()
+    public static void init()
     {
-        this.verbose = getBoolean( "verbose", true );
-
-        log( "-------- World Settings For [" + worldName + "] --------" );
-        PaperSpigotConfig.readConfig( PaperSpigotWorldConfig.class, this );
+        config = SharedConfig.config;
+        verbose = getBoolean( "verbose", true );
+        SharedConfig.readConfig( PaperSpigotWorldConfig.class, null );
     }
 
-    private void log(String s)
+    private static void log(String s)
     {
         if ( verbose )
         {
@@ -36,98 +26,93 @@ public class PaperSpigotWorldConfig
         }
     }
 
-    private void set(String path, Object val)
+    private static boolean getBoolean(String path, boolean def)
     {
-        config.set( "world-settings.default." + path, val );
+        config.addDefault( "paper.world-settings." + path, def );
+        return config.getBoolean( "paper.world-settings." + path, config.getBoolean( "paper.world-settings." + path ) );
     }
 
-    private boolean getBoolean(String path, boolean def)
+    private static double getDouble(String path, double def)
     {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getBoolean( "world-settings." + worldName + "." + path, config.getBoolean( "world-settings.default." + path ) );
+        config.addDefault( "paper.world-settings." + path, def );
+        return config.getDouble( "paper.world-settings." + path, config.getDouble( "paper.world-settings." + path ) );
     }
 
-    private double getDouble(String path, double def)
+    private static int getInt(String path, int def)
     {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getDouble( "world-settings." + worldName + "." + path, config.getDouble( "world-settings.default." + path ) );
+        config.addDefault( "paper.world-settings." + path, def );
+        return config.getInt( "paper.world-settings." + path, config.getInt( "paper.world-settings." + path ) );
     }
 
-    private int getInt(String path, int def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getInt( "world-settings." + worldName + "." + path, config.getInt( "world-settings.default." + path ) );
-    }
-
-    private float getFloat(String path, float def)
+    private static float getFloat(String path, float def)
     {
         // TODO: Figure out why getFloat() always returns the default value.
         return (float) getDouble( path, (double) def );
     }
 
-    private <T> List getList(String path, T def)
+    private static <T> List getList(String path, T def)
     {
-        config.addDefault( "world-settings.default." + path, def );
-        return (List<T>) config.getList( "world-settings." + worldName + "." + path, config.getList( "world-settings.default." + path ) );
+        config.addDefault( "paper.world-settings." + path, def );
+        return (List<T>) config.getList( "paper.world-settings." + path, config.getList( "paper.world-settings." + path ) );
     }
 
-    private String getString(String path, String def)
+    private static String getString(String path, String def)
     {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getString( "world-settings." + worldName + "." + path, config.getString( "world-settings.default." + path ) );
+        config.addDefault( "paper.world-settings." + path, def );
+        return config.getString( "paper.world-settings." + path, config.getString( "paper.world-settings." + path ) );
     }
 
-    public boolean allowUndeadHorseLeashing;
-    private void allowUndeadHorseLeashing()
+    public static boolean allowUndeadHorseLeashing;
+    private static void allowUndeadHorseLeashing()
     {
         allowUndeadHorseLeashing = getBoolean( "allow-undead-horse-leashing", false );
         log( "Allow undead horse types to be leashed: " + allowUndeadHorseLeashing );
     }
 
-    public double squidMinSpawnHeight;
-    public double squidMaxSpawnHeight;
-    private void squidSpawnHeight()
+    public static double squidMinSpawnHeight;
+    public static double squidMaxSpawnHeight;
+    private static void squidSpawnHeight()
     {
         squidMinSpawnHeight = getDouble( "squid-spawn-height.minimum", 45.0D );
         squidMaxSpawnHeight = getDouble( "squid-spawn-height.maximum", 63.0D );
         log( "Squids will spawn between Y: " + squidMinSpawnHeight + " and Y: " + squidMaxSpawnHeight );
     }
 
-    public float playerBlockingDamageMultiplier;
-    private void playerBlockingDamageMultiplier()
+    public static float playerBlockingDamageMultiplier;
+    private static void playerBlockingDamageMultiplier()
     {
         playerBlockingDamageMultiplier = getFloat( "player-blocking-damage-multiplier", 0.5F );
         log( "Player blocking damage multiplier set to " + playerBlockingDamageMultiplier );
     }
 
-    public int cactusMaxHeight;
-    public int reedMaxHeight;
-    private void blockGrowthHeight()
+    public static int cactusMaxHeight;
+    public static int reedMaxHeight;
+    private static void blockGrowthHeight()
     {
         cactusMaxHeight = getInt( "max-growth-height.cactus", 3 );
         reedMaxHeight = getInt( "max-growth-height.reeds", 3 );
         log( "Max height for cactus growth " + cactusMaxHeight + ". Max height for reed growth " + reedMaxHeight );
     }
 
-    public int fishingMinTicks;
-    public int fishingMaxTicks;
-    private void fishingTickRange()
+    public static int fishingMinTicks;
+    public static int fishingMaxTicks;
+    private static void fishingTickRange()
     {
         fishingMinTicks = getInt( "fishing-time-range.MinimumTicks", 100 );
         fishingMaxTicks = getInt( "fishing-time-range.MaximumTicks", 900 );
     }
 
-    public float blockBreakExhaustion;
-    public float playerSwimmingExhaustion;
-    private void exhaustionValues()
+    public static float blockBreakExhaustion;
+    public static float playerSwimmingExhaustion;
+    private static void exhaustionValues()
     {
         blockBreakExhaustion = getFloat( "player-exhaustion.block-break", 0.025F );
         playerSwimmingExhaustion = getFloat( "player-exhaustion.swimming", 0.015F );
     }
 
-    public int softDespawnDistance;
-    public int hardDespawnDistance;
-    private void despawnDistances()
+    public static int softDespawnDistance;
+    public static int hardDespawnDistance;
+    private static void despawnDistances()
     {
         softDespawnDistance = getInt( "despawn-ranges.soft", 32 ); // 32^2 = 1024, Minecraft Default
         hardDespawnDistance = getInt( "despawn-ranges.hard", 128 ); // 128^2 = 16384, Minecraft Default;
@@ -142,15 +127,15 @@ public class PaperSpigotWorldConfig
         hardDespawnDistance = hardDespawnDistance*hardDespawnDistance;
     }
 
-    public boolean keepSpawnInMemory;
-    private void keepSpawnInMemory()
+    public static boolean keepSpawnInMemory;
+    private static void keepSpawnInMemory()
     {
         keepSpawnInMemory = getBoolean( "keep-spawn-loaded", true );
         log( "Keep spawn chunk loaded: " + keepSpawnInMemory );
     }
 
-    public int fallingBlockHeightNerf;
-    private void fallingBlockheightNerf()
+    public static int fallingBlockHeightNerf;
+    private static void fallingBlockheightNerf()
     {
         fallingBlockHeightNerf = getInt( "falling-block-height-nerf", 0 );
         if ( fallingBlockHeightNerf != 0 )
@@ -159,8 +144,8 @@ public class PaperSpigotWorldConfig
         }
     }
 
-    public int tntEntityHeightNerf;
-    private void tntEntityHeightNerf()
+    public static int tntEntityHeightNerf;
+    private static void tntEntityHeightNerf()
     {
         tntEntityHeightNerf = getInt( "tnt-entity-height-nerf", 0 );
         if ( tntEntityHeightNerf != 0 )
@@ -169,49 +154,49 @@ public class PaperSpigotWorldConfig
         }
     }
 
-    public int waterOverLavaFlowSpeed;
-    private void waterOverLavaFlowSpeed()
+    public static int waterOverLavaFlowSpeed;
+    private static void waterOverLavaFlowSpeed()
     {
         waterOverLavaFlowSpeed = getInt( "water-over-lava-flow-speed", 5 );
         log( "Water over lava flow speed: " + waterOverLavaFlowSpeed );
     }
 
-    public boolean removeInvalidMobSpawnerTEs;
-    private void removeInvalidMobSpawnerTEs()
+    public static boolean removeInvalidMobSpawnerTEs;
+    private static void removeInvalidMobSpawnerTEs()
     {
         removeInvalidMobSpawnerTEs = getBoolean( "remove-invalid-mob-spawner-tile-entities", true );
         log( "Remove invalid mob spawner tile entities: " + removeInvalidMobSpawnerTEs );
     }
 
-    public boolean removeUnloadedEnderPearls;
-    public boolean removeUnloadedTNTEntities;
-    public boolean removeUnloadedFallingBlocks;
-    private void removeUnloaded()
+    public static boolean removeUnloadedEnderPearls;
+    public static boolean removeUnloadedTNTEntities;
+    public static boolean removeUnloadedFallingBlocks;
+    private static void removeUnloaded()
     {
         removeUnloadedEnderPearls = getBoolean( "remove-unloaded.enderpearls", true );
         removeUnloadedTNTEntities = getBoolean( "remove-unloaded.tnt-entities", true );
         removeUnloadedFallingBlocks = getBoolean( "remove-unloaded.falling-blocks", true );
     }
 
-    public boolean boatsDropBoats;
-    public boolean disablePlayerCrits;
-    public boolean disableChestCatDetection;
-    private void mechanicsChanges()
+    public static boolean boatsDropBoats;
+    public static boolean disablePlayerCrits;
+    public static boolean disableChestCatDetection;
+    private static void mechanicsChanges()
     {
         boatsDropBoats = getBoolean( "game-mechanics.boats-drop-boats", false );
         disablePlayerCrits = getBoolean( "game-mechanics.disable-player-crits", false );
         disableChestCatDetection = getBoolean( "game-mechanics.disable-chest-cat-detection", false );
     }
 
-    public boolean netherVoidTopDamage;
-    private void nethervoidTopDamage()
+    public static boolean netherVoidTopDamage;
+    private static void nethervoidTopDamage()
     {
         netherVoidTopDamage = getBoolean( "nether-ceiling-void-damage", false );
     }
 
-    public int tickNextTickCap;
-    public boolean tickNextTickListCapIgnoresRedstone;
-    private void tickNextTickCap()
+    public static int tickNextTickCap;
+    public static boolean tickNextTickListCapIgnoresRedstone;
+    private static void tickNextTickCap()
     {
         tickNextTickCap = getInt( "tick-next-tick-list-cap", 10000 ); // Higher values will be friendlier to vanilla style mechanics (to a point) but may hurt performance
         tickNextTickListCapIgnoresRedstone = getBoolean( "tick-next-tick-list-cap-ignores-redstone", false ); // Redstone TickNextTicks will always bypass the preceding cap.
@@ -219,40 +204,40 @@ public class PaperSpigotWorldConfig
         log( "WorldServer TickNextTickList cap always processes redstone: " + tickNextTickListCapIgnoresRedstone );
     }
 
-    public boolean useAsyncLighting;
-    private void useAsyncLighting()
+    public static boolean useAsyncLighting;
+    private static void useAsyncLighting()
     {
         useAsyncLighting = getBoolean( "use-async-lighting", false );
         log( "World async lighting: " + useAsyncLighting );
     }
 
-    public boolean disableEndCredits;
-    private void disableEndCredits()
+    public static boolean disableEndCredits;
+    private static void disableEndCredits()
     {
         disableEndCredits = getBoolean( "game-mechanics.disable-end-credits", false );
     }
 
-    public boolean loadUnloadedEnderPearls;
-    public boolean loadUnloadedTNTEntities;
-    public boolean loadUnloadedFallingBlocks;
-    private void loadUnloaded()
+    public static boolean loadUnloadedEnderPearls;
+    public static boolean loadUnloadedTNTEntities;
+    public static boolean loadUnloadedFallingBlocks;
+    private static void loadUnloaded()
     {
         loadUnloadedEnderPearls = getBoolean( "load-chunks.enderpearls", false );
         loadUnloadedTNTEntities = getBoolean( "load-chunks.tnt-entities", false );
         loadUnloadedFallingBlocks = getBoolean( "load-chunks.falling-blocks", false );
     }
 
-    public boolean generateCanyon;
-    public boolean generateCaves;
-    public boolean generateDungeon;
-    public boolean generateFortress;
-    public boolean generateMineshaft;
-    public boolean generateMonument;
-    public boolean generateStronghold;
-    public boolean generateTemple;
-    public boolean generateVillage;
-    public boolean generateFlatBedrock;
-    private void generatorSettings()
+    public static boolean generateCanyon;
+    public static boolean generateCaves;
+    public static boolean generateDungeon;
+    public static boolean generateFortress;
+    public static boolean generateMineshaft;
+    public static boolean generateMonument;
+    public static boolean generateStronghold;
+    public static boolean generateTemple;
+    public static boolean generateVillage;
+    public static boolean generateFlatBedrock;
+    private static void generatorSettings()
     {
         generateCanyon = getBoolean( "generator-settings.canyon", true );
         generateCaves = getBoolean( "generator-settings.caves", true );
@@ -266,164 +251,131 @@ public class PaperSpigotWorldConfig
         generateFlatBedrock = getBoolean( "generator-settings.flat-bedrock", false );
     }
 
-    public boolean fixCannons;
-    private void fixCannons()
+    public static boolean fixCannons;
+    private static void fixCannons()
     {
-        // TODO: Remove migrations after most users have upgraded.
-        if ( PaperSpigotConfig.version < 9 )
-        {
-            // Migrate default value
-
-            boolean value = config.getBoolean( "world-settings.default.fix-cannons", false );
-            if ( !value ) value = config.getBoolean( "world-settings.default.tnt-gameplay.fix-directional-bias", false );
-            if ( !value ) value = !config.getBoolean( "world-settings.default.tnt-gameplay.moves-in-water", true );
-            if ( !value ) value = config.getBoolean( "world-settings.default.tnt-gameplay.legacy-explosion-height", false );
-            if ( value ) config.set( "world-settings.default.fix-cannons", true );
-
-            if ( config.contains( "world-settings.default.tnt-gameplay" ) )
-            {
-                config.getDefaults().set( "world-settings.default.tnt-gameplay", null);
-                config.set( "world-settings.default.tnt-gameplay", null );
-            }
-
-            // Migrate world setting
-
-            value = config.getBoolean( "world-settings." + worldName + ".fix-cannons", false );
-            if ( !value ) value = config.getBoolean( "world-settings." + worldName + ".tnt-gameplay.fix-directional-bias", false );
-            if ( !value ) value = !config.getBoolean( "world-settings." + worldName + ".tnt-gameplay.moves-in-water", true );
-            if ( !value ) value = config.getBoolean( "world-settings." + worldName + ".tnt-gameplay.legacy-explosion-height", false );
-            if ( value ) config.set( "world-settings." + worldName + ".fix-cannons", true );
-
-            if ( config.contains( "world-settings." + worldName + ".tnt-gameplay" ) )
-            {
-                config.getDefaults().set( "world-settings." + worldName + ".tnt-gameplay", null);
-                config.set( "world-settings." + worldName + ".tnt-gameplay", null );
-            }
-        }
-
         fixCannons = getBoolean( "fix-cannons", false );
-        log( "Fix TNT cannons: " + fixCannons );
     }
 
-    public boolean fallingBlocksCollideWithSigns;
-    private void fallingBlocksCollideWithSigns()
+    public static boolean fallingBlocksCollideWithSigns;
+    private static void fallingBlocksCollideWithSigns()
     {
         fallingBlocksCollideWithSigns = getBoolean( "falling-blocks-collide-with-signs", false );
     }
 
-    public boolean optimizeExplosions;
-    private void optimizeExplosions()
+    public static boolean optimizeExplosions;
+    private static void optimizeExplosions()
     {
         optimizeExplosions = getBoolean( "optimize-explosions", false );
     }
 
-    public boolean fastDrainLava;
-    public boolean fastDrainWater;
-    private void fastDraining()
+    public static boolean fastDrainLava;
+    public static boolean fastDrainWater;
+    private static void fastDraining()
     {
         fastDrainLava = getBoolean( "fast-drain.lava", false );
         fastDrainWater = getBoolean( "fast-drain.water", false );
     }
 
-    public int lavaFlowSpeedNormal;
-    public int lavaFlowSpeedNether;
-    private void lavaFlowSpeed()
+    public static int lavaFlowSpeedNormal;
+    public static int lavaFlowSpeedNether;
+    private static void lavaFlowSpeed()
     {
         lavaFlowSpeedNormal = getInt( "lava-flow-speed.normal", 30 );
         lavaFlowSpeedNether = getInt( "lava-flow-speed.nether", 10 );
     }
 
-    public boolean disableExplosionKnockback;
-    private void disableExplosionKnockback()
+    public static boolean disableExplosionKnockback;
+    private static void disableExplosionKnockback()
     {
         disableExplosionKnockback = getBoolean( "disable-explosion-knockback", false );
     }
 
-    public boolean disableThunder;
-    private void disableThunder()
+    public static boolean disableThunder;
+    private static void disableThunder()
     {
         disableThunder = getBoolean( "disable-thunder", false );
     }
 
-    public boolean disableIceAndSnow;
-    private void disableIceAndSnow()
+    public static boolean disableIceAndSnow;
+    private static void disableIceAndSnow()
     {
         disableIceAndSnow = getBoolean( "disable-ice-and-snow", false );
     }
 
-    public boolean disableMoodSounds;
-    private void disableMoodSounds()
+    public static boolean disableMoodSounds;
+    private static void disableMoodSounds()
     {
         disableMoodSounds = getBoolean( "disable-mood-sounds", false );
     }
 
-    public int mobSpawnerTickRate;
-    private void mobSpawnerTickRate()
+    public static int mobSpawnerTickRate;
+    private static void mobSpawnerTickRate()
     {
         mobSpawnerTickRate = getInt( "mob-spawner-tick-rate", 1 );
     }
 
-    public boolean cacheChunkMaps;
-    private void cacheChunkMaps()
+    public static boolean cacheChunkMaps;
+    private static void cacheChunkMaps()
     {
         cacheChunkMaps = getBoolean( "cache-chunk-maps", false );
     }
 
-    public int containerUpdateTickRate;
-    private void containerUpdateTickRate()
+    public static int containerUpdateTickRate;
+    private static void containerUpdateTickRate()
     {
         containerUpdateTickRate = getInt( "container-update-tick-rate", 1 );
     }
 
-    public float tntExplosionVolume;
-    private void tntExplosionVolume()
+    public static float tntExplosionVolume;
+    private static void tntExplosionVolume()
     {
         tntExplosionVolume = getFloat( "tnt-explosion-volume", 4.0F );
     }
 
-    public boolean useHopperCheck;
-    private void useHopperCheck()
+    public static boolean useHopperCheck;
+    private static void useHopperCheck()
     {
         useHopperCheck = getBoolean( "use-hopper-check", false );
     }
 
-    public boolean allChunksAreSlimeChunks;
-    private void allChunksAreSlimeChunks()
+    public static boolean allChunksAreSlimeChunks;
+    private static void allChunksAreSlimeChunks()
     {
         allChunksAreSlimeChunks = getBoolean( "all-chunks-are-slime-chunks", false );
     }
 
-    public boolean allowBlockLocationTabCompletion;
-    private void allowBlockLocationTabCompletion()
+    public static boolean allowBlockLocationTabCompletion;
+    private static void allowBlockLocationTabCompletion()
     {
         allowBlockLocationTabCompletion = getBoolean( "allow-block-location-tab-completion", true );
     }
 
-    public int portalSearchRadius;
-    private void portalSearchRadius()
+    public static int portalSearchRadius;
+    private static void portalSearchRadius()
     {
         portalSearchRadius = getInt("portal-search-radius", 128);
     }
 
-    public boolean disableTeleportationSuffocationCheck;
-    private void disableTeleportationSuffocationCheck()
+    public static boolean disableTeleportationSuffocationCheck;
+    private static void disableTeleportationSuffocationCheck()
     {
         disableTeleportationSuffocationCheck = getBoolean("disable-teleportation-suffocation-check", false);
     }
 
-    public boolean useInhabitedTime = true;
-    private void useInhabitedTime() {
+    public static boolean useInhabitedTime = true;
+    private static void useInhabitedTime() {
         useInhabitedTime = getBoolean("use-chunk-inhabited-timer", true);
     }
 
-    public int grassUpdateRate = 1;
-    private void grassUpdateRate() {
+    public static int grassUpdateRate = 1;
+    private static void grassUpdateRate() {
         grassUpdateRate = Math.max(0, getInt("grass-spread-tick-rate", grassUpdateRate));
         log("Grass Spread Tick Rate: " + grassUpdateRate);
     }
 
-    public int autoSavePeriod = -1;
-    private void autoSavePeriod() {
+    public static int autoSavePeriod = -1;
+    private static void autoSavePeriod() {
         autoSavePeriod = getInt("auto-save-interval", -1);
         if (autoSavePeriod > 0) {
             log("Auto Save Interval: " +autoSavePeriod + " (" + (autoSavePeriod / 20) + "s)");
@@ -432,18 +384,18 @@ public class PaperSpigotWorldConfig
         }
     }
 
-    public int maxAutoSaveChunksPerTick = 24;
-    private void maxAutoSaveChunksPerTick() {
+    public static int maxAutoSaveChunksPerTick = 24;
+    private static void maxAutoSaveChunksPerTick() {
         maxAutoSaveChunksPerTick = getInt("max-auto-save-chunks-per-tick", 24);
     }
 
-    public boolean removeCorruptTEs = false;
-    private void removeCorruptTEs() {
+    public static boolean removeCorruptTEs = false;
+    private static void removeCorruptTEs() {
         removeCorruptTEs = getBoolean("remove-corrupt-tile-entities", false);
     }
 
-    public boolean armorStandEntityLookups = true;
-    private void armorStandEntityLookups() {
+    public static boolean armorStandEntityLookups = true;
+    private static void armorStandEntityLookups() {
             armorStandEntityLookups = getBoolean("armor-stands-do-collision-entity-lookups", true);
     }
 }
diff --git a/src/main/java/org/github/paperspigot/SharedConfig.java b/src/main/java/org/github/paperspigot/SharedConfig.java
new file mode 100644
index 00000000..c79ad514
--- /dev/null
+++ b/src/main/java/org/github/paperspigot/SharedConfig.java
@@ -0,0 +1,87 @@
+package org.github.paperspigot;
+
+import com.google.common.base.Throwables;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.spigotmc.SpigotConfig;
+import org.spigotmc.SpigotWorldConfig;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+
+public class SharedConfig {
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for SportPaper.\n"
+            + "Command aliases also go in this file, just put what you would normally put in commands.yml under a commands: tag";
+
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    public static Map<String, Command> commands;
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load (CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load sportpaper.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+
+        commands = new HashMap<String, Command>();
+
+        BukkitConfig.init();
+        SpigotConfig.init();
+        PaperSpigotConfig.init();
+        SpigotWorldConfig.init();
+        PaperSpigotWorldConfig.init();
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.
+                    getServer().
+                    server.
+                    getCommandMap().
+                    register(entry.getKey(), "SportPaper", entry.getValue());
+        }
+    }
+
+    public static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+}
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 7ab41039..ec995293 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -1,13 +1,6 @@
 package org.spigotmc;
 
-import com.google.common.base.Throwables;
-import java.io.File;
-import java.io.IOException;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
 import java.util.Arrays;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
@@ -18,7 +11,6 @@ import gnu.trove.map.hash.TObjectIntHashMap;
 import com.google.common.collect.Lists;
 import net.minecraft.server.AttributeRanged;
 import net.minecraft.server.GenericAttributes;
-import net.minecraft.server.MinecraftServer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.Configuration;
@@ -26,141 +18,54 @@ import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.configuration.ConfigurationSection;
-import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 import co.aikar.timings.Timings;
 import co.aikar.timings.TimingsManager;
+import org.github.paperspigot.SharedConfig;
 
 public class SpigotConfig
 {
-
-    private static File CONFIG_FILE;
-    private static final String HEADER = "This is the main configuration file for Spigot.\n"
-            + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
-            + "with caution, and make sure you know what each option does before configuring.\n"
-            + "For a reference for any variable inside this file, check out the Spigot wiki at\n"
-            + "http://www.spigotmc.org/wiki/spigot-configuration/\n"
-            + "\n"
-            + "If you need help with the configuration or have any questions related to Spigot,\n"
-            + "join us at the IRC or drop by our forums and leave a post.\n"
-            + "\n"
-            + "IRC: #spigot @ irc.spi.gt ( http://www.spigotmc.org/pages/irc/ )\n"
-            + "Forums: http://www.spigotmc.org/\n";
-    /*========================================================================*/
     public static YamlConfiguration config;
-    static int version;
     static Map<String, Command> commands;
-    /*========================================================================*/
-    private static Metrics metrics;
 
-    public static void init(File configFile)
+    public static void init()
     {
-        CONFIG_FILE = configFile;
-        config = new YamlConfiguration();
-        try
-        {
-            config.load( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-        } catch ( InvalidConfigurationException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not load spigot.yml, please correct your syntax errors", ex );
-            throw Throwables.propagate( ex );
-        }
-
-        config.options().header( HEADER );
-        config.options().copyDefaults( true );
-
-        commands = new HashMap<String, Command>();
-
-        version = getInt( "config-version", 8 );
-        set( "config-version", 8 );
-        readConfig( SpigotConfig.class, null );
-    }
-
-    public static void registerCommands()
-    {
-        for ( Map.Entry<String, Command> entry : commands.entrySet() )
-        {
-            MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "Spigot", entry.getValue() );
-        }
-
-        if ( metrics == null )
-        {
-            try
-            {
-                metrics = new Metrics();
-                metrics.start();
-            } catch ( IOException ex )
-            {
-                Bukkit.getServer().getLogger().log( Level.SEVERE, "Could not start metrics service", ex );
-            }
-        }
-    }
-
-    static void readConfig(Class<?> clazz, Object instance)
-    {
-        for ( Method method : clazz.getDeclaredMethods() )
-        {
-            if ( Modifier.isPrivate( method.getModifiers() ) )
-            {
-                if ( method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE )
-                {
-                    try
-                    {
-                        method.setAccessible( true );
-                        method.invoke( instance );
-                    } catch ( InvocationTargetException ex )
-                    {
-                        throw Throwables.propagate( ex.getCause() );
-                    } catch ( Exception ex )
-                    {
-                        Bukkit.getLogger().log( Level.SEVERE, "Error invoking " + method, ex );
-                    }
-                }
-            }
-        }
-
-        try
-        {
-            config.save( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not save " + CONFIG_FILE, ex );
-        }
-    }
-
-    private static void set(String path, Object val)
-    {
-        config.set( path, val );
+        config = SharedConfig.config;
+        commands = SharedConfig.commands;
+        SharedConfig.readConfig( SpigotConfig.class, null );
     }
 
     private static boolean getBoolean(String path, boolean def)
     {
+        path = "spigot." + path;
         config.addDefault( path, def );
         return config.getBoolean( path, config.getBoolean( path ) );
     }
 
     private static int getInt(String path, int def)
     {
+        path = "spigot." + path;
         config.addDefault( path, def );
         return config.getInt( path, config.getInt( path ) );
     }
 
     private static <T> List getList(String path, T def)
     {
+        path = "spigot." + path;
         config.addDefault( path, def );
         return (List<T>) config.getList( path, config.getList( path ) );
     }
 
     private static String getString(String path, String def)
     {
+        path = "spigot." + path;
         config.addDefault( path, def );
         return config.getString( path, config.getString( path ) );
     }
 
     private static double getDouble(String path, double def)
     {
+        path = "spigot." + path;
         config.addDefault( path, def );
         return config.getDouble( path, config.getDouble( path ) );
     }
@@ -174,17 +79,6 @@ public class SpigotConfig
     public static int tabComplete;
     private static void tabComplete()
     {
-        if ( version < 6 )
-        {
-            boolean oldValue = getBoolean( "commands.tab-complete", true );
-            if ( oldValue )
-            {
-                set( "commands.tab-complete", 0 );
-            } else
-            {
-                set( "commands.tab-complete", -1 );
-            }
-        }
         tabComplete = getInt( "commands.tab-complete", 0 );
     }
 
@@ -199,12 +93,6 @@ public class SpigotConfig
     }
     private static void messages()
     {
-        if (version < 8)
-        {
-            set( "messages.outdated-client", outdatedClientMessage );
-            set( "messages.outdated-server", outdatedServerMessage );
-        }
-
         whitelistMessage = transform( getString( "messages.whitelist", "You are not whitelisted on this server!" ) );
         unknownCommandMessage = transform( getString( "messages.unknown-command", "Unknown command. Type \"/help\" for help." ) );
         serverFullMessage = transform( getString( "messages.server-full", "The server is full!" ) );
@@ -234,11 +122,6 @@ public class SpigotConfig
 
     public static boolean bungee;
     private static void bungee() {
-        if ( version < 4 )
-        {
-            set( "settings.bungeecord", false );
-            System.out.println( "Oudated config, disabling BungeeCord support!" );
-        }
         bungee = getBoolean( "settings.bungeecord", false );
     }
 
@@ -293,11 +176,11 @@ public class SpigotConfig
     {
         disableStatSaving = getBoolean( "stats.disable-saving", false );
 
-        if ( !config.contains( "stats.forced-stats" ) ) {
-            config.createSection( "stats.forced-stats" );
+        if ( !config.contains( "spigot.stats.forced-stats" ) ) {
+            config.createSection( "spigot.stats.forced-stats" );
         }
 
-        ConfigurationSection section = config.getConfigurationSection( "stats.forced-stats" );
+        ConfigurationSection section = config.getConfigurationSection( "spigot.stats.forced-stats" );
         for ( String name : section.getKeys( true ) )
         {
             if ( section.isInt( name ) )
@@ -356,11 +239,6 @@ public class SpigotConfig
     public static Set<String> replaceCommands;
     private static void replaceCommands()
     {
-        if ( config.contains( "replace-commands" ) )
-        {
-            set( "commands.replace-commands", config.getStringList( "replace-commands" ) );
-            config.set( "replace-commands", null );
-        }
         replaceCommands = new HashSet<String>( (List<String>) getList( "commands.replace-commands",
                 Arrays.asList( "setblock", "summon", "testforblock", "tellraw" ) ) );
     }
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 8e86212a..6438268d 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -4,30 +4,22 @@ import java.util.Arrays;
 import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
+import org.github.paperspigot.SharedConfig;
 
 public class SpigotWorldConfig
 {
+    private static YamlConfiguration config;
+    private static boolean verbose;
 
-    private final String worldName;
-    private final YamlConfiguration config;
-    private boolean verbose;
-
-    public SpigotWorldConfig(String worldName)
-    {
-        this.worldName = worldName;
-        this.config = SpigotConfig.config;
-        init();
-    }
-
-    public void init()
+    public static void init()
     {
-        this.verbose = getBoolean( "verbose", true );
+        config = SharedConfig.config;
+        verbose = getBoolean( "verbose", true );
 
-        log( "-------- World Settings For [" + worldName + "] --------" );
-        SpigotConfig.readConfig( SpigotWorldConfig.class, this );
+        SharedConfig.readConfig( SpigotWorldConfig.class, null );
     }
 
-    private void log(String s)
+    private static void log(String s)
     {
         if ( verbose )
         {
@@ -35,44 +27,39 @@ public class SpigotWorldConfig
         }
     }
 
-    private void set(String path, Object val)
+    private static boolean getBoolean(String path, boolean def)
     {
-        config.set( "world-settings.default." + path, val );
+        config.addDefault( "spigot.world-settings." + path, def );
+        return config.getBoolean( "spigot.world-settings." + path, config.getBoolean( "spigot.world-settings." + path ) );
     }
 
-    private boolean getBoolean(String path, boolean def)
+    private static double getDouble(String path, double def)
     {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getBoolean( "world-settings." + worldName + "." + path, config.getBoolean( "world-settings.default." + path ) );
+        config.addDefault( "spigot.world-settings." + path, def );
+        return config.getDouble( "spigot.world-settings." + path, config.getDouble( "spigot.world-settings." + path ) );
     }
 
-    private double getDouble(String path, double def)
+    private static int getInt(String path, int def)
     {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getDouble( "world-settings." + worldName + "." + path, config.getDouble( "world-settings.default." + path ) );
+        config.addDefault( "spigot.world-settings." + path, def );
+        return config.getInt( "spigot.world-settings." + path, config.getInt( "spigot.world-settings." + path ) );
     }
 
-    private int getInt(String path, int def)
+    private static  <T> List getList(String path, T def)
     {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getInt( "world-settings." + worldName + "." + path, config.getInt( "world-settings.default." + path ) );
+        config.addDefault( "spigot.world-settings." + path, def );
+        return (List<T>) config.getList( "spigot.world-settings." + path, config.getList( "spigot.world-settings." + path ) );
     }
 
-    private <T> List getList(String path, T def)
+    private static String getString(String path, String def)
     {
-        config.addDefault( "world-settings.default." + path, def );
-        return (List<T>) config.getList( "world-settings." + worldName + "." + path, config.getList( "world-settings.default." + path ) );
+        config.addDefault( "spigot.world-settings." + path, def );
+        return config.getString( "spigot.world-settings." + path, config.getString( "spigot.world-settings." + path ) );
     }
 
-    private String getString(String path, String def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getString( "world-settings." + worldName + "." + path, config.getString( "world-settings.default." + path ) );
-    }
-
-    public int chunksPerTick;
-    public boolean clearChunksOnTick;
-    private void chunksPerTick()
+    public static int chunksPerTick;
+    public static boolean clearChunksOnTick;
+    private static void chunksPerTick()
     {
         chunksPerTick = getInt( "chunks-per-tick", 650 );
         log( "Chunks to Grow per Tick: " + chunksPerTick );
@@ -82,15 +69,15 @@ public class SpigotWorldConfig
     }
 
     // Crop growth rates
-    public int cactusModifier;
-    public int caneModifier;
-    public int melonModifier;
-    public int mushroomModifier;
-    public int pumpkinModifier;
-    public int saplingModifier;
-    public int wheatModifier;
-    public int wartModifier;
-    private int getAndValidateGrowth(String crop)
+    public static int cactusModifier;
+    public static int caneModifier;
+    public static int melonModifier;
+    public static int mushroomModifier;
+    public static int pumpkinModifier;
+    public static int saplingModifier;
+    public static int wheatModifier;
+    public static int wartModifier;
+    private static int getAndValidateGrowth(String crop)
     {
         int modifier = getInt( "growth." + crop.toLowerCase() + "-modifier", 100 );
         if ( modifier == 0 )
@@ -102,7 +89,7 @@ public class SpigotWorldConfig
 
         return modifier;
     }
-    private void growthModifiers()
+    private static void growthModifiers()
     {
         cactusModifier = getAndValidateGrowth( "Cactus" );
         caneModifier = getAndValidateGrowth( "Cane" );
@@ -114,38 +101,38 @@ public class SpigotWorldConfig
         wartModifier = getAndValidateGrowth( "NetherWart" );
     }
 
-    public double itemMerge;
-    private void itemMerge()
+    public static double itemMerge;
+    private static void itemMerge()
     {
         itemMerge = getDouble("merge-radius.item", 2.5 );
         log( "Item Merge Radius: " + itemMerge );
     }
 
-    public double expMerge;
-    private void expMerge()
+    public static double expMerge;
+    private static void expMerge()
     {
         expMerge = getDouble("merge-radius.exp", 3.0 );
         log( "Experience Merge Radius: " + expMerge );
     }
 
-    public int viewDistance;
-    private void viewDistance()
+    public static int viewDistance;
+    private static void viewDistance()
     {
         viewDistance = getInt( "view-distance", Bukkit.getViewDistance() );
         log( "View Distance: " + viewDistance );
     }
 
-    public byte mobSpawnRange;
-    private void mobSpawnRange()
+    public static byte mobSpawnRange;
+    private static void mobSpawnRange()
     {
         mobSpawnRange = (byte) getInt( "mob-spawn-range", 4 );
         log( "Mob Spawn Range: " + mobSpawnRange );
     }
 
-    public int animalActivationRange = 32;
-    public int monsterActivationRange = 32;
-    public int miscActivationRange = 16;
-    private void activationRange()
+    public static int animalActivationRange = 32;
+    public static int monsterActivationRange = 32;
+    public static int miscActivationRange = 16;
+    private static void activationRange()
     {
         animalActivationRange = getInt( "entity-activation-range.animals", animalActivationRange );
         monsterActivationRange = getInt( "entity-activation-range.monsters", monsterActivationRange );
@@ -153,12 +140,12 @@ public class SpigotWorldConfig
         log( "Entity Activation Range: An " + animalActivationRange + " / Mo " + monsterActivationRange + " / Mi " + miscActivationRange );
     }
 
-    public int playerTrackingRange = 48;
-    public int animalTrackingRange = 48;
-    public int monsterTrackingRange = 48;
-    public int miscTrackingRange = 32;
-    public int otherTrackingRange = 64;
-    private void trackingRange()
+    public static int playerTrackingRange = 48;
+    public static int animalTrackingRange = 48;
+    public static int monsterTrackingRange = 48;
+    public static int miscTrackingRange = 32;
+    public static int otherTrackingRange = 64;
+    private static void trackingRange()
     {
         playerTrackingRange = getInt( "entity-tracking-range.players", playerTrackingRange );
         animalTrackingRange = getInt( "entity-tracking-range.animals", animalTrackingRange );
@@ -168,10 +155,10 @@ public class SpigotWorldConfig
         log( "Entity Tracking Range: Pl " + playerTrackingRange + " / An " + animalTrackingRange + " / Mo " + monsterTrackingRange + " / Mi " + miscTrackingRange + " / Other " + otherTrackingRange );
     }
 
-    public int hopperTransfer;
-    public int hopperCheck;
-    public int hopperAmount;
-    private void hoppers()
+    public static int hopperTransfer;
+    public static int hopperCheck;
+    public static int hopperAmount;
+    private static void hoppers()
     {
         // Set the tick delay between hopper item movements
         hopperTransfer = getInt( "ticks-per.hopper-transfer", 8 );
@@ -183,15 +170,15 @@ public class SpigotWorldConfig
         log( "Hopper Transfer: " + hopperTransfer + " Hopper Check: " + hopperCheck + " Hopper Amount: " + hopperAmount );
     }
 
-    public boolean randomLightUpdates;
-    private void lightUpdates()
+    public static boolean randomLightUpdates;
+    private static void lightUpdates()
     {
         randomLightUpdates = getBoolean( "random-light-updates", false );
         log( "Random Lighting Updates: " + randomLightUpdates );
     }
 
-    public boolean saveStructureInfo;
-    private void structureInfo()
+    public static boolean saveStructureInfo;
+    private static void structureInfo()
     {
         saveStructureInfo = getBoolean( "save-structure-info", true );
         log( "Structure Info Saving: " + saveStructureInfo );
@@ -202,26 +189,26 @@ public class SpigotWorldConfig
         }
     }
 
-    public int itemDespawnRate;
-    private void itemDespawnRate()
+    public static int itemDespawnRate;
+    private static void itemDespawnRate()
     {
         itemDespawnRate = getInt( "item-despawn-rate", 6000 );
         log( "Item Despawn Rate: " + itemDespawnRate );
     }
 
-    public int arrowDespawnRate;
-    private void arrowDespawnRate()
+    public static int arrowDespawnRate;
+    private static void arrowDespawnRate()
     {
         arrowDespawnRate = getInt( "arrow-despawn-rate", 1200  );
         log( "Arrow Despawn Rate: " + arrowDespawnRate );
     }
     
-    public boolean antiXray;
-    public int engineMode;
-    public List<Integer> hiddenBlocks;
-    public List<Integer> replaceBlocks;
-    public AntiXray antiXrayInstance;
-    private void antiXray()
+    public static boolean antiXray;
+    public static int engineMode;
+    public static List<Integer> hiddenBlocks;
+    public static List<Integer> replaceBlocks;
+    public static AntiXray antiXrayInstance;
+    private static void antiXray()
     {
         antiXray = getBoolean( "anti-xray.enabled", true );
         log( "Anti X-Ray: " + antiXray );
@@ -229,10 +216,6 @@ public class SpigotWorldConfig
         engineMode = getInt( "anti-xray.engine-mode", 1 );
         log( "\tEngine Mode: " + engineMode );
 
-        if ( SpigotConfig.version < 5 )
-        {
-            set( "anti-xray.blocks", null );
-        }
         hiddenBlocks = getList( "anti-xray.hide-blocks", Arrays.asList( new Integer[]
         {
             14, 15, 16, 21, 48, 49, 54, 56, 73, 74, 82, 129, 130
@@ -245,70 +228,70 @@ public class SpigotWorldConfig
         } ) );
         log( "\tReplace Blocks: " + replaceBlocks );
 
-        antiXrayInstance = new AntiXray( this );
+        antiXrayInstance = new AntiXray( new SpigotWorldConfig() );
     }
 
-    public boolean zombieAggressiveTowardsVillager;
-    private void zombieAggressiveTowardsVillager()
+    public static boolean zombieAggressiveTowardsVillager;
+    private static void zombieAggressiveTowardsVillager()
     {
         zombieAggressiveTowardsVillager = getBoolean( "zombie-aggressive-towards-villager", true );
         log( "Zombie Aggressive Towards Villager: " + zombieAggressiveTowardsVillager );
     }
 
-    public boolean nerfSpawnerMobs;
-    private void nerfSpawnerMobs()
+    public static boolean nerfSpawnerMobs;
+    private static void nerfSpawnerMobs()
     {
         nerfSpawnerMobs = getBoolean( "nerf-spawner-mobs", false );
         log( "Nerfing mobs spawned from spawners: " + nerfSpawnerMobs );
     }
 
-    public boolean enableZombiePigmenPortalSpawns;
-    private void enableZombiePigmenPortalSpawns()
+    public static boolean enableZombiePigmenPortalSpawns;
+    private static void enableZombiePigmenPortalSpawns()
     {
         enableZombiePigmenPortalSpawns = getBoolean( "enable-zombie-pigmen-portal-spawns", true );
         log( "Allow Zombie Pigmen to spawn from portal blocks: " + enableZombiePigmenPortalSpawns );
     }
 
-    public int maxBulkChunk;
-    private void bulkChunkCount()
+    public static int maxBulkChunk;
+    private static void bulkChunkCount()
     {
         maxBulkChunk = getInt( "max-bulk-chunks", 10 );
         log( "Sending up to " + maxBulkChunk + " chunks per packet" );
     }
 
-    public int maxCollisionsPerEntity;
-    private void maxEntityCollision()
+    public static int maxCollisionsPerEntity;
+    private static void maxEntityCollision()
     {
         maxCollisionsPerEntity = getInt( "max-entity-collisions", 8 );
         log( "Max Entity Collisions: " + maxCollisionsPerEntity );
     }
 
-    public int dragonDeathSoundRadius;
-    private void keepDragonDeathPerWorld()
+    public static int dragonDeathSoundRadius;
+    private static void keepDragonDeathPerWorld()
     {
         dragonDeathSoundRadius = getInt( "dragon-death-sound-radius", 0 );
     }
 
-    public int witherSpawnSoundRadius;
-    private void witherSpawnSoundRadius()
+    public static int witherSpawnSoundRadius;
+    private static void witherSpawnSoundRadius()
     {
         witherSpawnSoundRadius = getInt( "wither-spawn-sound-radius", 0 );
     }
 
-    public int villageSeed;
-    public int largeFeatureSeed;
-    private void initWorldGenSeeds()
+    public static int villageSeed;
+    public static int largeFeatureSeed;
+    private static void initWorldGenSeeds()
     {
         villageSeed = getInt( "seed-village", 10387312 );
         largeFeatureSeed = getInt( "seed-feature", 14357617 );
         log( "Custom Map Seeds:  Village: " + villageSeed + " Feature: " + largeFeatureSeed );
     }
 
-    public float walkExhaustion;
-    public float sprintExhaustion;
-    public float combatExhaustion;
-    public float regenExhaustion;
-    private void initHunger()
+    public static float walkExhaustion;
+    public static float sprintExhaustion;
+    public static float combatExhaustion;
+    public static float regenExhaustion;
+    private static void initHunger()
     {
         walkExhaustion = (float) getDouble( "hunger.walk-exhaustion", 0.2 );
         sprintExhaustion = (float) getDouble( "hunger.sprint-exhaustion", 0.8 );
@@ -316,26 +299,22 @@ public class SpigotWorldConfig
         regenExhaustion = (float) getDouble( "hunger.regen-exhaustion", 3 );
     }
 
-    public int currentPrimedTnt = 0;
-    public int maxTntTicksPerTick;
-    private void maxTntPerTick() {
-        if ( SpigotConfig.version < 7 )
-        {
-            set( "max-tnt-per-tick", 100 );
-        }
+    public static int currentPrimedTnt = 0;
+    public static int maxTntTicksPerTick;
+    private static void maxTntPerTick() {
         maxTntTicksPerTick = getInt( "max-tnt-per-tick", 100 );
         log( "Max TNT Explosions: " + maxTntTicksPerTick );
     }
 
-    public int hangingTickFrequency;
-    private void hangingTickFrequency()
+    public static int hangingTickFrequency;
+    private static void hangingTickFrequency()
     {
         hangingTickFrequency = getInt( "hanging-tick-frequency", 100 );
     }
 
-    public int tileMaxTickTime;
-    public int entityMaxTickTime;
-    private void maxTickTimes()
+    public static int tileMaxTickTime;
+    public static int entityMaxTickTime;
+    private static void maxTickTimes()
     {
         tileMaxTickTime = getInt("max-tick-time.tile", 50);
         entityMaxTickTime = getInt("max-tick-time.entity", 50);
diff --git a/src/main/resources/configurations/bukkit.yml b/src/main/resources/configurations/bukkit.yml
deleted file mode 100644
index 8bbb835f..00000000
--- a/src/main/resources/configurations/bukkit.yml
+++ /dev/null
@@ -1,43 +0,0 @@
-# This is the main configuration file for Bukkit.
-# As you can see, there's actually not that much to configure without any plugins.
-# For a reference for any variable inside this file, check out the Bukkit Wiki at
-# http://wiki.bukkit.org/Bukkit.yml
-# 
-# If you need help on this file, feel free to join us on irc or leave a message
-# on the forums asking for advice.
-# 
-# IRC: #spigot @ irc.spi.gt
-#    (If this means nothing to you, just go to http://www.spigotmc.org/pages/irc/ )
-# Forums: http://www.spigotmc.org/
-# Bug tracker: http://www.spigotmc.org/go/bugs
-
-
-settings:
-    allow-end: true
-    warn-on-overload: true
-    permissions-file: permissions.yml
-    update-folder: update
-    plugin-profiling: false
-    connection-throttle: 4000
-    query-plugins: true
-    deprecated-verbose: default
-    shutdown-message: Server closed
-spawn-limits:
-    monsters: 70
-    animals: 15
-    water-animals: 5
-    ambient: 15
-chunk-gc:
-    period-in-ticks: 600
-    load-threshold: 0
-ticks-per:
-    animal-spawns: 400
-    monster-spawns: 1
-    autosave: 6000
-aliases: now-in-commands.yml
-database:
-    username: bukkit
-    isolation: SERIALIZABLE
-    driver: org.sqlite.JDBC
-    password: walrus
-    url: jdbc:sqlite:{DIR}{NAME}.db
diff --git a/src/main/resources/configurations/commands.yml b/src/main/resources/configurations/commands.yml
deleted file mode 100644
index 733307c2..00000000
--- a/src/main/resources/configurations/commands.yml
+++ /dev/null
@@ -1,16 +0,0 @@
-# This is the commands configuration file for Bukkit.
-# For documentation on how to make use of this file, check out the Bukkit Wiki at
-# http://wiki.bukkit.org/Commands.yml
-# 
-# If you need help on this file, feel free to join us on irc or leave a message
-# on the forums asking for advice.
-# 
-# IRC: #spigot @ irc.spi.gt
-#    (If this means nothing to you, just go to http://www.spigotmc.org/pages/irc/ )
-# Forums: http://www.spigotmc.org/
-# Bug tracker: http://www.spigotmc.org/go/bugs
-
-command-block-overrides: []
-aliases:
-    icanhasbukkit:
-      - "version $1-"
-- 
2.50.1

