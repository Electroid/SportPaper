From dd25fb04cc69c8cee8b15091c72d09ec4c523bc6 Mon Sep 17 00:00:00 2001
From: TheMolkaPL <themolkapl@gmail.com>
Date: Tue, 31 Dec 2019 03:07:18 +0100
Subject: [PATCH] Allow plugins to append custom data in server ping

Signed-off-by: TheMolkaPL <themolkapl@gmail.com>

diff --git a/src/main/java/net/minecraft/server/PacketStatusListener.java b/src/main/java/net/minecraft/server/PacketStatusListener.java
index e4bff04a..770fd53a 100644
--- a/src/main/java/net/minecraft/server/PacketStatusListener.java
+++ b/src/main/java/net/minecraft/server/PacketStatusListener.java
@@ -5,6 +5,7 @@ import com.mojang.authlib.GameProfile;
 import io.netty.channel.ChannelFutureListener;
 import java.net.InetSocketAddress;
 import java.util.Iterator;
+import java.util.Locale; // SportPaper - server list ping extra
 
 import org.bukkit.craftbukkit.util.CraftIconCache;
 import org.bukkit.entity.Player;
@@ -123,6 +124,14 @@ public class PacketStatusListener implements PacketStatusInListener {
         ping.setPlayerSample(playerSample);
         ping.setServerInfo(new ServerPing.ServerData(minecraftServer.getServerModName() + " " + minecraftServer.getVersion(), 47)); // TODO: Update when protocol changes
 
+        // SportPaper start - append extras
+        event.getExtras().forEach((plugin, object) -> {
+            if (!object.entrySet().isEmpty()) {
+                ping.getExtra().putIfAbsent(plugin.getName().toLowerCase(Locale.ROOT), object);
+            }
+        });
+        // SportPaper end
+
         this.networkManager.handle(new PacketStatusOutServerInfo(ping));
         // CraftBukkit end
     }
diff --git a/src/main/java/net/minecraft/server/ServerPing.java b/src/main/java/net/minecraft/server/ServerPing.java
index 034a559b..3f471702 100644
--- a/src/main/java/net/minecraft/server/ServerPing.java
+++ b/src/main/java/net/minecraft/server/ServerPing.java
@@ -12,12 +12,19 @@ import com.mojang.authlib.GameProfile;
 import java.lang.reflect.Type;
 import java.util.UUID;
 
+// SportPaper start
+import java.util.Locale;
+import java.util.Map;
+import java.util.HashMap;
+// SportPaper end
+
 public class ServerPing {
 
     private IChatBaseComponent a;
     private ServerPing.ServerPingPlayerSample b;
     private ServerPing.ServerData c;
     private String d;
+    private final Map<String, JsonObject> extra = new HashMap<>(); // SportPaper - extra
 
     public ServerPing() {}
 
@@ -53,6 +60,13 @@ public class ServerPing {
         return this.d;
     }
 
+    // SportPaper start - getter for extra
+    // NOTE: keys are plugin names in lower case, same as in NamespacedKey
+    public Map<String, JsonObject> getExtra() {
+        return this.extra;
+    }
+    // SportPaper end
+
     public static class Serializer implements JsonDeserializer<ServerPing>, JsonSerializer<ServerPing> {
 
         public Serializer() {}
@@ -77,6 +91,14 @@ public class ServerPing {
                 serverping.setFavicon(ChatDeserializer.h(jsonobject, "favicon"));
             }
 
+            // SportPaper start - deserialize extra
+            if (jsonobject.has("bukkit_extra")) {
+                jsonobject.getAsJsonObject("bukkit_extra").entrySet().forEach(entry -> {
+                    serverping.extra.putIfAbsent(entry.getKey(), entry.getValue().getAsJsonObject());
+                });
+            }
+            // SportPaper end
+
             return serverping;
         }
 
@@ -99,14 +121,27 @@ public class ServerPing {
                 jsonobject.addProperty("favicon", serverping.d());
             }
 
+            // SportPaper start - serialize extra
+            JsonObject serializedExtra = new JsonObject();
+            serverping.extra.forEach((pluginName, jsonObject) -> {
+                if (!jsonObject.entrySet().isEmpty()) {
+                    serializedExtra.add(pluginName, jsonObject);
+                }
+            });
+
+            if (!serializedExtra.entrySet().isEmpty()) {
+                jsonobject.add("bukkit_extra", serializedExtra);
+            }
+            // SportPaper end
+
             return jsonobject;
         }
 
-        public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
+        public JsonElement serialize(ServerPing object, Type type, JsonSerializationContext jsonserializationcontext) { // SportPaper - compile error
             return this.a((ServerPing) object, type, jsonserializationcontext);
         }
 
-        public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+        public ServerPing deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // SportPaper - compile error
             return this.a(jsonelement, type, jsondeserializationcontext);
         }
     }
@@ -147,11 +182,11 @@ public class ServerPing {
                 return jsonobject;
             }
 
-            public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
+            public JsonElement serialize(ServerPing.ServerData object, Type type, JsonSerializationContext jsonserializationcontext) { // SportPaper - compile error
                 return this.a((ServerPing.ServerData) object, type, jsonserializationcontext);
             }
 
-            public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            public ServerPing.ServerData deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // SportPaper - compile error
                 return this.a(jsonelement, type, jsondeserializationcontext);
             }
         }
@@ -235,11 +270,11 @@ public class ServerPing {
                 return jsonobject;
             }
 
-            public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
+            public JsonElement serialize(ServerPing.ServerPingPlayerSample object, Type type, JsonSerializationContext jsonserializationcontext) { // SportPaper - compile error
                 return this.a((ServerPing.ServerPingPlayerSample) object, type, jsonserializationcontext);
             }
 
-            public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            public ServerPing.ServerPingPlayerSample deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // SportPaper - compile error
                 return this.a(jsonelement, type, jsondeserializationcontext);
             }
         }
-- 
2.23.0.windows.1

