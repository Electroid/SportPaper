From 17954a136f243f3ca99d7c3b277e31ab21361d57 Mon Sep 17 00:00:00 2001
From: linsaftw <linsaftw@users.noreply.github.com>
Date: Tue, 27 Apr 2021 09:53:13 -0300
Subject: [PATCH] Catch FastUtil exception


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index e58c022b..9af18fbd 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -96,7 +96,11 @@ public class ChunkProviderServer implements IChunkProvider {
         if (this.world.worldProvider.e()) {
             if (!this.world.c(i, j)) {
                 // CraftBukkit start
-                this.unloadQueue.add(LongHash.toLong(i, j)); // SportPaper
+                try { 
+                    this.unloadQueue.add(LongHash.toLong(i, j)); // SportPaper
+                } catch (Exception e) {
+                    // SportPaper - Catch possible NPEs (Concurrent modification?)
+                }
 
                 Chunk c = chunks.get(LongHash.toLong(i, j));
                 if (c != null) {
@@ -106,7 +110,11 @@ public class ChunkProviderServer implements IChunkProvider {
             }
         } else {
             // CraftBukkit start
-            this.unloadQueue.add(LongHash.toLong(i, j)); // SportPaper
+            try { 
+                this.unloadQueue.add(LongHash.toLong(i, j)); // SportPaper
+            } catch (Exception e) {
+                // SportPaper - Catch possible NPEs (Concurrent modification?)
+            }
 
             Chunk c = chunks.get(LongHash.toLong(i, j));
             if (c != null) {
@@ -163,7 +171,12 @@ public class ChunkProviderServer implements IChunkProvider {
             chunk = originalGetChunkAt(i, j);
         }
 
-        unloadQueue.remove(LongHash.toLong(i, j)); // SportPaper
+        try {
+            unloadQueue.remove(LongHash.toLong(i, j)); // SportPaper
+        } catch (Exception e) {
+            // SportPaper - Catch possible NPEs (Concurrent modification?)
+        }
+        
         // If we didn't load the chunk async and have a callback run it now
         if (runnable != null) {
             runnable.run();
@@ -232,7 +245,12 @@ public class ChunkProviderServer implements IChunkProvider {
             world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
 
-        this.unloadQueue.remove(LongHash.toLong(i, j)); // SportPaper
+        try { 
+            this.unloadQueue.remove(LongHash.toLong(i, j)); // SportPaper
+        } catch (Exception e) {
+            // SportPaper - Catch possible NPEs (Concurrent modification?)
+        }
+
         return chunk;
     }
 
@@ -414,7 +432,11 @@ public class ChunkProviderServer implements IChunkProvider {
             this.saveChunkNOP(chunk);
             this.chunks.remove(chunk.chunkKey); // CraftBukkit
             if (!auto && this.unloadQueue.contains(chunk.chunkKey)) {
-                this.unloadQueue.remove(chunk.chunkKey);
+                try {
+                    this.unloadQueue.remove(chunk.chunkKey);
+                } catch (Exception e) {
+                    // SportPaper - Catch possible NPEs (Concurrent modification?)
+                }
             }
 
             // Update neighbor counts
@@ -442,12 +464,16 @@ public class ChunkProviderServer implements IChunkProvider {
             // SportPaper start
             LongIterator iterator = unloadQueue.iterator();
             for (int i = 0; i < 100 && iterator.hasNext(); ++i) {
-                long chunkcoordinates = iterator.nextLong();
-                iterator.remove();
-                // SportPaper end
-                Chunk chunk = this.chunks.get(chunkcoordinates);
-                if (chunk == null) continue;
-                unloadChunk(chunk, true); // SportPaper - Move to own method
+                try {
+                    long chunkcoordinates = iterator.nextLong();
+                    iterator.remove();
+                    // SportPaper end
+                    Chunk chunk = this.chunks.get(chunkcoordinates);
+                    if (chunk == null) continue;
+                    unloadChunk(chunk, true); // SportPaper - Move to own method
+                } catch (Exception e) {
+                    // SportPaper - Catch possible NPEs (Concurrent modification?)
+                }
             }
             // CraftBukkit end
 
-- 
2.31.1

