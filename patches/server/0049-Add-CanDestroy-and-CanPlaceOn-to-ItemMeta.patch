From 03c011c68bef19a6f5ba51c46f744b7df04b5505 Mon Sep 17 00:00:00 2001
From: cswhite2000 <18whitechristop@gmail.com>
Date: Tue, 7 Aug 2018 21:42:47 -0700
Subject: [PATCH] Add CanDestroy and CanPlaceOn to ItemMeta


diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index eaaa6a11..16fc76ad 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -13,6 +13,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.NoSuchElementException;
 
+import net.minecraft.server.Block;
 import net.minecraft.server.NBTBase;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.NBTTagList;
@@ -29,6 +30,7 @@ import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.ItemFlag;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.inventory.meta.Repairable;
+import org.bukkit.util.ImmutableMaterialSet;
 
 import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableList;
@@ -219,12 +221,18 @@ class CraftMetaItem implements ItemMeta, Repairable {
     static final ItemMetaKey HIDEFLAGS = new ItemMetaKey("HideFlags", "ItemFlags");
     @Specific(Specific.To.NBT)
     static final ItemMetaKey UNBREAKABLE = new ItemMetaKey("Unbreakable"); // Spigot
+    @Specific(Specific.To.NBT)
+    static final ItemMetaKey CAN_DESTROY = new ItemMetaKey("CanDestroy");
+    @Specific(Specific.To.NBT)
+    static final ItemMetaKey CAN_PLACE_ON = new ItemMetaKey("CanPlaceOn");
 
     private String displayName;
     private List<String> lore;
     private Map<Enchantment, Integer> enchantments;
     private int repairCost;
     private int hideFlag;
+    private ImmutableMaterialSet canDestroy = ImmutableMaterialSet.of();
+    private ImmutableMaterialSet canPlaceOn = ImmutableMaterialSet.of();
 
     private static final Set<String> HANDLED_TAGS = Sets.newHashSet();
 
@@ -247,6 +255,8 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
         this.repairCost = meta.repairCost;
         this.hideFlag = meta.hideFlag;
+        this.canDestroy = meta.canDestroy;
+        this.canPlaceOn = meta.canPlaceOn;
         this.unhandledTags.putAll(meta.unhandledTags);
         spigot.setUnbreakable( meta.spigot.isUnbreakable() ); // Spigot
     }
@@ -443,6 +453,9 @@ class CraftMetaItem implements ItemMeta, Repairable {
             unhandledTags.put(ATTRIBUTES.NBT, save);
         }
 
+        this.canDestroy = buildMaterialSet(tag, CAN_DESTROY);
+        this.canPlaceOn = buildMaterialSet(tag, CAN_PLACE_ON);
+
         Set<String> keys = tag.c();
         for (String key : keys) {
             if (!getHandledTags().contains(key)) {
@@ -457,6 +470,25 @@ class CraftMetaItem implements ItemMeta, Repairable {
         // Spigot end
     }
 
+    static ImmutableMaterialSet buildMaterialSet(NBTTagCompound tag, ItemMetaKey key) {
+        if(!tag.hasKey(key.NBT)) return ImmutableMaterialSet.of();
+
+        NBTTagList list = tag.getList(key.NBT, 8);
+        if(list.isEmpty()) return ImmutableMaterialSet.of();
+
+        ImmutableMaterialSet.Builder materials = ImmutableMaterialSet.builder();
+        for(int i = 0; i < list.size(); i++) {
+            Block block = Block.getByName(list.getString(i));
+            if(block != null) {
+                Material material = Material.getMaterial(Block.getId(block));
+                if(material != null) {
+                    materials.add(material);
+                }
+            }
+        }
+        return materials.build();
+    }
+
     static Map<Enchantment, Integer> buildEnchantments(NBTTagCompound tag, ItemMetaKey key) {
         if (!tag.hasKey(key.NBT)) {
             return null;
@@ -582,6 +614,14 @@ class CraftMetaItem implements ItemMeta, Repairable {
             itemTag.setInt(REPAIR.NBT, repairCost);
         }
 
+        if(!canDestroy.isEmpty()) {
+            applyMaterialList(canDestroy, itemTag, CAN_DESTROY);
+        }
+
+        if(!canPlaceOn.isEmpty()) {
+            applyMaterialList(canPlaceOn, itemTag, CAN_PLACE_ON);
+        }
+
         for (Map.Entry<String, NBTBase> e : unhandledTags.entrySet()) {
             itemTag.set(e.getKey(), e.getValue());
         }
@@ -600,6 +640,18 @@ class CraftMetaItem implements ItemMeta, Repairable {
         return tagList;
     }
 
+    static void applyMaterialList(Set<Material> materials, NBTTagCompound tag, ItemMetaKey key) {
+        if(materials.isEmpty()) return;
+        NBTTagList list = new NBTTagList();
+        for(Material material : materials) {
+            Block block = Block.getById(material.getId());
+            if(block != null) {
+                list.add(new NBTTagString(Block.REGISTRY.c(block).toString()));
+            }
+        }
+        if(!list.isEmpty()) tag.set(key.NBT, list);
+    }
+
     static void applyEnchantments(Map<Enchantment, Integer> enchantments, NBTTagCompound tag, ItemMetaKey key) {
         if (enchantments == null /*|| enchantments.size() == 0*/) { // Spigot - remove size check
             return;
@@ -636,7 +688,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
     @Overridden
     boolean isEmpty() {
-        return !(hasDisplayName() || hasEnchants() || hasLore() || hasRepairCost() || !unhandledTags.isEmpty() || hideFlag != 0 || spigot.isUnbreakable()); // Spigot
+        return !(hasDisplayName() || hasEnchants() || hasLore() || hasRepairCost() || !unhandledTags.isEmpty() || hideFlag != 0 || spigot.isUnbreakable() || !canDestroy.isEmpty() || !canPlaceOn.isEmpty()); // Spigot
     }
 
     public String getDisplayName() {
@@ -768,6 +820,30 @@ class CraftMetaItem implements ItemMeta, Repairable {
         repairCost = cost;
     }
 
+    @Override
+    public ImmutableMaterialSet getCanDestroy() {
+        return canDestroy;
+    }
+    @Override
+    public void setCanDestroy(Collection<Material> materials) {
+        canDestroy = ImmutableMaterialSet.of(materials);
+    }
+    @Override
+    public void setCanDestroy(Material...materials) {
+        canDestroy = ImmutableMaterialSet.of(materials);
+    }
+    @Override
+    public ImmutableMaterialSet getCanPlaceOn() {
+        return canPlaceOn;
+    }
+    @Override
+    public void setCanPlaceOn(Collection<Material> materials) {
+        canPlaceOn = ImmutableMaterialSet.of(materials);
+    }
+    @Override
+    public void setCanPlaceOn(Material...materials) {
+        canPlaceOn = ImmutableMaterialSet.of(materials);
+    }
     @Override
     public final boolean equals(Object object) {
         if (object == null) {
@@ -821,6 +897,8 @@ class CraftMetaItem implements ItemMeta, Repairable {
         hash = 61 * hash + (hasEnchants() ? this.enchantments.hashCode() : 0);
         hash = 61 * hash + (hasRepairCost() ? this.repairCost : 0);
         hash = 61 * hash + unhandledTags.hashCode();
+        hash = 61 * hash + canDestroy.hashCode();
+        hash = 61 * hash + canPlaceOn.hashCode();
         hash = 61 * hash + hideFlag;
         hash = 61 * hash + (spigot.isUnbreakable() ? 1231 : 1237); // Spigot
         return hash;
@@ -838,6 +916,8 @@ class CraftMetaItem implements ItemMeta, Repairable {
                 clone.enchantments = new HashMap<Enchantment, Integer>(this.enchantments);
             }
             clone.hideFlag = this.hideFlag;
+            clone.canDestroy = this.canDestroy;
+            clone.canPlaceOn = this.canPlaceOn;
             return clone;
         } catch (CloneNotSupportedException e) {
             throw new Error(e);
@@ -966,6 +1046,8 @@ class CraftMetaItem implements ItemMeta, Repairable {
             if (HANDLED_TAGS.isEmpty()) {
                 HANDLED_TAGS.addAll(Arrays.asList(
                         UNBREAKABLE.NBT, // Spigot
+                        CAN_DESTROY.NBT,
+                        CAN_PLACE_ON.NBT,
                         DISPLAY.NBT,
                         REPAIR.NBT,
                         ENCHANTMENTS.NBT,
-- 
2.50.1

