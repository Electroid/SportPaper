From 055f89aee5073eb9058ea3eaf7c6dee8c39b5c96 Mon Sep 17 00:00:00 2001
From: VytskaLT <VytskaLT@protonmail.com>
Date: Sat, 20 Mar 2021 12:16:24 +0200
Subject: [PATCH] World specific listeners


diff --git a/src/main/java/org/bukkit/plugin/PluginLoader.java b/src/main/java/org/bukkit/plugin/PluginLoader.java
index e7981a1d..cad155a0 100644
--- a/src/main/java/org/bukkit/plugin/PluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/PluginLoader.java
@@ -5,9 +5,12 @@ import java.util.Map;
 import java.util.Set;
 import java.util.regex.Pattern;
 
+import org.bukkit.World;
 import org.bukkit.event.Event;
 import org.bukkit.event.Listener;
 
+import javax.annotation.Nullable;
+
 /**
  * Represents a plugin loader, which handles direct access to specific types
  * of plugins
@@ -55,6 +58,17 @@ public interface PluginLoader {
      */
     public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(Listener listener, Plugin plugin);
 
+    /**
+     * Creates and returns registered listeners for the event classes used in
+     * this listener
+     *
+     * @param listener The object that will handle the eventual call back
+     * @param plugin The plugin to use when creating registered listeners
+     * @param world The world to bind to the registered listeners
+     * @return The registered listeners.
+     */
+    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(Listener listener, Plugin plugin, @Nullable World world);
+
     /**
      * Enables the specified plugin
      * <p>
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 1fd306d1..e48d1521 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -3,6 +3,7 @@ package org.bukkit.plugin;
 import java.io.File;
 import java.util.Set;
 
+import org.bukkit.World;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventCallback;
 import org.bukkit.event.EventPriority;
@@ -10,6 +11,8 @@ import org.bukkit.event.Listener;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.permissions.Permission;
 
+import javax.annotation.Nullable;
+
 /**
  * Handles all plugin management from the Server
  */
@@ -198,6 +201,15 @@ public interface PluginManager {
      */
     public void registerEvents(Listener listener, Plugin plugin);
 
+    /**
+     * Registers all the events in the given listener class
+     *
+     * @param listener Listener to register
+     * @param plugin Plugin to register
+     * @param world World to bind to the listener
+     */
+    public void registerEvents(Listener listener, Plugin plugin, @Nullable World world);
+
     /**
      * Registers the specified executor to the given event class
      *
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 5e58e8f8..4743ea39 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -20,6 +20,7 @@ import java.util.regex.Pattern;
 
 import org.apache.commons.lang.Validate;
 import org.bukkit.Server;
+import org.bukkit.World;
 import org.bukkit.command.Command;
 import org.bukkit.command.PluginCommandYamlParser;
 import org.bukkit.command.PluginIdentifiableCommand;
@@ -39,6 +40,8 @@ import org.github.paperspigot.event.ServerExceptionEvent;
 import org.github.paperspigot.exception.ServerEventException;
 import org.github.paperspigot.exception.ServerPluginEnableDisableException;
 
+import javax.annotation.Nullable;
+
 /**
  * Handles all plugin management from the Server
  */
@@ -607,12 +610,17 @@ public final class SimplePluginManager implements PluginManager {
         }
     }
 
+    @Override
     public void registerEvents(Listener listener, Plugin plugin) {
+        registerEvents(listener, plugin, null);
+    }
+
+    public void registerEvents(Listener listener, Plugin plugin, @Nullable World world) {
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + listener + " while not enabled");
         }
 
-        for (Map.Entry<Class<? extends Event>, Set<RegisteredListener>> entry : plugin.getPluginLoader().createRegisteredListeners(listener, plugin).entrySet()) {
+        for (Map.Entry<Class<? extends Event>, Set<RegisteredListener>> entry : plugin.getPluginLoader().createRegisteredListeners(listener, plugin, world).entrySet()) {
             Event.getHandlerList(entry.getKey()).registerAll(entry.getValue());
         }
 
diff --git a/src/main/java/org/bukkit/plugin/WorldSpecificRegisteredListener.java b/src/main/java/org/bukkit/plugin/WorldSpecificRegisteredListener.java
new file mode 100644
index 00000000..2d7c0318
--- /dev/null
+++ b/src/main/java/org/bukkit/plugin/WorldSpecificRegisteredListener.java
@@ -0,0 +1,38 @@
+package org.bukkit.plugin;
+
+import org.bukkit.Physical;
+import org.bukkit.World;
+import org.bukkit.event.Event;
+import org.bukkit.event.EventException;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.Listener;
+
+/**
+ * World specific {@link RegisteredListener}
+ */
+public class WorldSpecificRegisteredListener extends RegisteredListener {
+
+    private final World world;
+
+    public WorldSpecificRegisteredListener(final Listener listener, final EventExecutor executor, final EventPriority priority, final Plugin plugin, final boolean ignoreCancelled, final World world) {
+        super(listener, executor, priority, plugin, ignoreCancelled);
+        this.world = world;
+    }
+
+    /**
+     * Gets the world for this registration
+     *
+     * @return Registered World
+     */
+    public World getWorld() {
+        return world;
+    }
+
+    @Override
+    public void callEvent(Event event) throws EventException {
+        if (event instanceof Physical && ((Physical) event).getWorld() != world) {
+            return;
+        }
+        super.callEvent(event);
+    }
+}
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 64812133..d32b02bc 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -21,6 +21,7 @@ import org.apache.commons.lang.Validate;
 import org.bukkit.Server;
 import org.bukkit.Warning;
 import org.bukkit.Warning.WarningState;
+import org.bukkit.World;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.event.Event;
@@ -39,8 +40,11 @@ import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.RegisteredListener;
 import org.bukkit.plugin.TimedRegisteredListener;
 import org.bukkit.plugin.UnknownDependencyException;
+import org.bukkit.plugin.WorldSpecificRegisteredListener;
 import org.yaml.snakeyaml.error.YAMLException;
 
+import javax.annotation.Nullable;
+
 /**
  * Represents a Java plugin loader, allowing plugins in the form of .jar
  */
@@ -226,6 +230,10 @@ public final class JavaPluginLoader implements PluginLoader {
     }
 
     public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(Listener listener, final Plugin plugin) {
+        return createRegisteredListeners(listener, plugin, null);
+    }
+
+    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(Listener listener, final Plugin plugin, @Nullable World world) {
         Validate.notNull(plugin, "Plugin can not be null");
         Validate.notNull(listener, "Listener can not be null");
 
@@ -308,6 +316,7 @@ public final class JavaPluginLoader implements PluginLoader {
             if (false) { // Spigot - RL handles useTimings check now
                 eventSet.add(new TimedRegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
             } else {
+                if (world != null) eventSet.add(new WorldSpecificRegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled(), world)); else // SportPaper
                 eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
             }
         }
-- 
2.25.1

